
STM32F103C8-BluePill-Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080037d4  080037d4  000137d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003868  08003868  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08003868  08003868  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003868  08003868  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003868  08003868  00013868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800386c  0800386c  0001386c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08003870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000084  080038f4  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  080038f4  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b00a  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d11  00000000  00000000  0002b0b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a98  00000000  00000000  0002cdc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009c8  00000000  00000000  0002d860  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002857  00000000  00000000  0002e228  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009a5d  00000000  00000000  00030a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000899cc  00000000  00000000  0003a4dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c3ea8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ed8  00000000  00000000  000c3f24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	080037bc 	.word	0x080037bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	080037bc 	.word	0x080037bc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000218:	f1a2 0201 	sub.w	r2, r2, #1
 800021c:	d1ed      	bne.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2iz>:
 8000618:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000620:	d30f      	bcc.n	8000642 <__aeabi_f2iz+0x2a>
 8000622:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d90d      	bls.n	8000648 <__aeabi_f2iz+0x30>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000634:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000638:	fa23 f002 	lsr.w	r0, r3, r2
 800063c:	bf18      	it	ne
 800063e:	4240      	negne	r0, r0
 8000640:	4770      	bx	lr
 8000642:	f04f 0000 	mov.w	r0, #0
 8000646:	4770      	bx	lr
 8000648:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800064c:	d101      	bne.n	8000652 <__aeabi_f2iz+0x3a>
 800064e:	0242      	lsls	r2, r0, #9
 8000650:	d105      	bne.n	800065e <__aeabi_f2iz+0x46>
 8000652:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000656:	bf08      	it	eq
 8000658:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800065c:	4770      	bx	lr
 800065e:	f04f 0000 	mov.w	r0, #0
 8000662:	4770      	bx	lr

08000664 <ADCSensor_Trigger_Read>:
 *  Created on: Feb 13, 2021
 *      Author: neilb
 */
#include "adcsensor.h"

void ADCSensor_Trigger_Read() {
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	// TODO: Add more ADC triggers when more ADCs are implemented.
	HAL_ADC_Start_DMA(&hadc1, adc1_val, ADC1_VAL_SIZE);
 8000668:	220a      	movs	r2, #10
 800066a:	4903      	ldr	r1, [pc, #12]	; (8000678 <ADCSensor_Trigger_Read+0x14>)
 800066c:	4803      	ldr	r0, [pc, #12]	; (800067c <ADCSensor_Trigger_Read+0x18>)
 800066e:	f000 fd57 	bl	8001120 <HAL_ADC_Start_DMA>
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	200000b0 	.word	0x200000b0
 800067c:	2000014c 	.word	0x2000014c

08000680 <ADCSensor_Read_Counts>:

uint16_t ADCSensor_Read_Counts(ADCSensorTypeDef* adc_sensor) {
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	// TODO: Should there be a way to return an error code if there isn't a new value ready?

	// Reset ready flag for next read operation.
	adc_sensor->value_ready_for_read = 0;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2200      	movs	r2, #0
 800068c:	731a      	strb	r2, [r3, #12]
	// Return the correct value from the ADC buffer.
	return adc1_val[adc_sensor->adc_index];
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	461a      	mov	r2, r3
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <ADCSensor_Read_Counts+0x28>)
 8000696:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800069a:	b29b      	uxth	r3, r3
}
 800069c:	4618      	mov	r0, r3
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	200000b0 	.word	0x200000b0

080006ac <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	// For each defined sensor, check to see if it uses the same ADC which
	// triggered the callback. If so, update its struct with the new information.
	for(int i = 0; i < ADC_SENSORS_SIZE; i++) {
 80006b4:	2300      	movs	r3, #0
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	e012      	b.n	80006e0 <HAL_ADC_ConvCpltCallback+0x34>
		if(adc_sensors[i]->adc->Instance == hadc->Instance) {
 80006ba:	4a0d      	ldr	r2, [pc, #52]	; (80006f0 <HAL_ADC_ConvCpltCallback+0x44>)
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d105      	bne.n	80006da <HAL_ADC_ConvCpltCallback+0x2e>
			adc_sensors[i]->value_ready_for_read = 1;
 80006ce:	4a08      	ldr	r2, [pc, #32]	; (80006f0 <HAL_ADC_ConvCpltCallback+0x44>)
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006d6:	2201      	movs	r2, #1
 80006d8:	731a      	strb	r2, [r3, #12]
	for(int i = 0; i < ADC_SENSORS_SIZE; i++) {
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	3301      	adds	r3, #1
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	dde9      	ble.n	80006ba <HAL_ADC_ConvCpltCallback+0xe>
			// TODO: Implement call to control loop indicating new sensor information is available.
		}
	}
}
 80006e6:	bf00      	nop
 80006e8:	3714      	adds	r7, #20
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	20000010 	.word	0x20000010

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b5b0      	push	{r4, r5, r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fa:	f000 fbb5 	bl	8000e68 <HAL_Init>
//  uint8_t uart_send_buffer[14] = {'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '!', '\r', '\n'};
//  memset(msg + strlen(msg), NULL, 30 - strlen(msg)); // https://stackoverflow.com/questions/33689274/how-to-fill-a-char-array-in-c/33689388
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fe:	f000 f88f 	bl	8000820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000702:	f000 f99d 	bl	8000a40 <MX_GPIO_Init>
  MX_DMA_Init();
 8000706:	f000 f97d 	bl	8000a04 <MX_DMA_Init>
  MX_I2C1_Init();
 800070a:	f000 f923 	bl	8000954 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800070e:	f000 f94f 	bl	80009b0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000712:	f000 f8e1 	bl	80008d8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
//  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_val, ADC_SIZE);
  ADCSensor_Trigger_Read();
 8000716:	f7ff ffa5 	bl	8000664 <ADCSensor_Trigger_Read>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
//	if(adc1_value_ready) {
	if(pot.value_ready_for_read) {
 800071a:	4b38      	ldr	r3, [pc, #224]	; (80007fc <main+0x108>)
 800071c:	7b1b      	ldrb	r3, [r3, #12]
 800071e:	b2db      	uxtb	r3, r3
 8000720:	2b00      	cmp	r3, #0
 8000722:	d032      	beq.n	800078a <main+0x96>
//	  	float voltage = (float)adc1_val[0]*(3.3/0xFFF);
		float voltage = ADCSensor_Read_Counts(&pot)/pot.counts_per_volt;
 8000724:	4835      	ldr	r0, [pc, #212]	; (80007fc <main+0x108>)
 8000726:	f7ff ffab 	bl	8000680 <ADCSensor_Read_Counts>
 800072a:	4603      	mov	r3, r0
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff fdcf 	bl	80002d0 <__aeabi_i2f>
 8000732:	4602      	mov	r2, r0
 8000734:	4b31      	ldr	r3, [pc, #196]	; (80007fc <main+0x108>)
 8000736:	689b      	ldr	r3, [r3, #8]
 8000738:	4619      	mov	r1, r3
 800073a:	4610      	mov	r0, r2
 800073c:	f7ff fed0 	bl	80004e0 <__aeabi_fdiv>
 8000740:	4603      	mov	r3, r0
 8000742:	60bb      	str	r3, [r7, #8]

		sprintf(msg, "Hello World! %d ADC: %d.%d\r\n", count, (int)voltage, (int)(voltage * 100) % 100);
 8000744:	4b2e      	ldr	r3, [pc, #184]	; (8000800 <main+0x10c>)
 8000746:	681c      	ldr	r4, [r3, #0]
 8000748:	68b8      	ldr	r0, [r7, #8]
 800074a:	f7ff ff65 	bl	8000618 <__aeabi_f2iz>
 800074e:	4605      	mov	r5, r0
 8000750:	492c      	ldr	r1, [pc, #176]	; (8000804 <main+0x110>)
 8000752:	68b8      	ldr	r0, [r7, #8]
 8000754:	f7ff fe10 	bl	8000378 <__aeabi_fmul>
 8000758:	4603      	mov	r3, r0
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff5c 	bl	8000618 <__aeabi_f2iz>
 8000760:	4602      	mov	r2, r0
 8000762:	4b29      	ldr	r3, [pc, #164]	; (8000808 <main+0x114>)
 8000764:	fb83 1302 	smull	r1, r3, r3, r2
 8000768:	1159      	asrs	r1, r3, #5
 800076a:	17d3      	asrs	r3, r2, #31
 800076c:	1acb      	subs	r3, r1, r3
 800076e:	2164      	movs	r1, #100	; 0x64
 8000770:	fb01 f303 	mul.w	r3, r1, r3
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	462b      	mov	r3, r5
 800077a:	4622      	mov	r2, r4
 800077c:	4923      	ldr	r1, [pc, #140]	; (800080c <main+0x118>)
 800077e:	4824      	ldr	r0, [pc, #144]	; (8000810 <main+0x11c>)
 8000780:	f002 fc0a 	bl	8002f98 <siprintf>
		ADCSensor_Trigger_Read();
 8000784:	f7ff ff6e 	bl	8000664 <ADCSensor_Trigger_Read>
 8000788:	e006      	b.n	8000798 <main+0xa4>
//		adc1_value_ready = 0;
//		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_val, ADC_SIZE);
	} else {
		sprintf(msg, "Hello World! %d\r\n", count);
 800078a:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <main+0x10c>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	461a      	mov	r2, r3
 8000790:	4920      	ldr	r1, [pc, #128]	; (8000814 <main+0x120>)
 8000792:	481f      	ldr	r0, [pc, #124]	; (8000810 <main+0x11c>)
 8000794:	f002 fc00 	bl	8002f98 <siprintf>
	}

//	ret_status = HAL_UART_Transmit(&huart1, (uint8_t*)&uart_send_buffer[0], strlen(uart_send_buffer), HAL_MAX_DELAY);
	ret_status = HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000798:	481d      	ldr	r0, [pc, #116]	; (8000810 <main+0x11c>)
 800079a:	f7ff fcd7 	bl	800014c <strlen>
 800079e:	4603      	mov	r3, r0
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295
 80007a6:	491a      	ldr	r1, [pc, #104]	; (8000810 <main+0x11c>)
 80007a8:	481b      	ldr	r0, [pc, #108]	; (8000818 <main+0x124>)
 80007aa:	f002 fa58 	bl	8002c5e <HAL_UART_Transmit>
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]

	for(int i = 0; i < BLINKS_PER_INTERVAL; i++) {
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	e014      	b.n	80007e2 <main+0xee>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007be:	4817      	ldr	r0, [pc, #92]	; (800081c <main+0x128>)
 80007c0:	f001 fbde 	bl	8001f80 <HAL_GPIO_WritePin>
		HAL_Delay(BLINK_PERIOD / 2);
 80007c4:	20fa      	movs	r0, #250	; 0xfa
 80007c6:	f000 fbb1 	bl	8000f2c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80007ca:	2201      	movs	r2, #1
 80007cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d0:	4812      	ldr	r0, [pc, #72]	; (800081c <main+0x128>)
 80007d2:	f001 fbd5 	bl	8001f80 <HAL_GPIO_WritePin>
		HAL_Delay(BLINK_PERIOD / 2);
 80007d6:	20fa      	movs	r0, #250	; 0xfa
 80007d8:	f000 fba8 	bl	8000f2c <HAL_Delay>
	for(int i = 0; i < BLINKS_PER_INTERVAL; i++) {
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	3301      	adds	r3, #1
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	dde7      	ble.n	80007b8 <main+0xc4>
	}
	HAL_Delay(BLINK_INTERVAL - BLINK_PERIOD * BLINKS_PER_INTERVAL);
 80007e8:	2000      	movs	r0, #0
 80007ea:	f000 fb9f 	bl	8000f2c <HAL_Delay>
//		if(ret_status != HAL_OK) {
//			// Error
//		}
//	}

	count++;
 80007ee:	4b04      	ldr	r3, [pc, #16]	; (8000800 <main+0x10c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	3301      	adds	r3, #1
 80007f4:	4a02      	ldr	r2, [pc, #8]	; (8000800 <main+0x10c>)
 80007f6:	6013      	str	r3, [r2, #0]
	if(pot.value_ready_for_read) {
 80007f8:	e78f      	b.n	800071a <main+0x26>
 80007fa:	bf00      	nop
 80007fc:	20000000 	.word	0x20000000
 8000800:	200000a0 	.word	0x200000a0
 8000804:	42c80000 	.word	0x42c80000
 8000808:	51eb851f 	.word	0x51eb851f
 800080c:	080037d4 	.word	0x080037d4
 8000810:	20000118 	.word	0x20000118
 8000814:	080037f4 	.word	0x080037f4
 8000818:	2000017c 	.word	0x2000017c
 800081c:	40011000 	.word	0x40011000

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b094      	sub	sp, #80	; 0x50
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800082a:	2228      	movs	r2, #40	; 0x28
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f002 fbaa 	bl	8002f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000850:	2301      	movs	r3, #1
 8000852:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000854:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000858:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800085e:	2301      	movs	r3, #1
 8000860:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000862:	2302      	movs	r3, #2
 8000864:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000866:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800086a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800086c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000870:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000872:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000876:	4618      	mov	r0, r3
 8000878:	f001 fcd2 	bl	8002220 <HAL_RCC_OscConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000882:	f000 f935 	bl	8000af0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000886:	230f      	movs	r3, #15
 8000888:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088a:	2302      	movs	r3, #2
 800088c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000896:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	2102      	movs	r1, #2
 80008a2:	4618      	mov	r0, r3
 80008a4:	f001 ff3c 	bl	8002720 <HAL_RCC_ClockConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80008ae:	f000 f91f 	bl	8000af0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008b2:	2302      	movs	r3, #2
 80008b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80008b6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80008ba:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	4618      	mov	r0, r3
 80008c0:	f002 f8ca 	bl	8002a58 <HAL_RCCEx_PeriphCLKConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008ca:	f000 f911 	bl	8000af0 <Error_Handler>
  }
}
 80008ce:	bf00      	nop
 80008d0:	3750      	adds	r7, #80	; 0x50
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80008e8:	4b18      	ldr	r3, [pc, #96]	; (800094c <MX_ADC1_Init+0x74>)
 80008ea:	4a19      	ldr	r2, [pc, #100]	; (8000950 <MX_ADC1_Init+0x78>)
 80008ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008ee:	4b17      	ldr	r3, [pc, #92]	; (800094c <MX_ADC1_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008f4:	4b15      	ldr	r3, [pc, #84]	; (800094c <MX_ADC1_Init+0x74>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008fa:	4b14      	ldr	r3, [pc, #80]	; (800094c <MX_ADC1_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <MX_ADC1_Init+0x74>)
 8000902:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000906:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000908:	4b10      	ldr	r3, [pc, #64]	; (800094c <MX_ADC1_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_ADC1_Init+0x74>)
 8000910:	2201      	movs	r2, #1
 8000912:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000914:	480d      	ldr	r0, [pc, #52]	; (800094c <MX_ADC1_Init+0x74>)
 8000916:	f000 fb2b 	bl	8000f70 <HAL_ADC_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000920:	f000 f8e6 	bl	8000af0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000924:	2300      	movs	r3, #0
 8000926:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000928:	2301      	movs	r3, #1
 800092a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	4619      	mov	r1, r3
 8000934:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_ADC1_Init+0x74>)
 8000936:	f000 fce3 	bl	8001300 <HAL_ADC_ConfigChannel>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000940:	f000 f8d6 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	2000014c 	.word	0x2000014c
 8000950:	40012400 	.word	0x40012400

08000954 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <MX_I2C1_Init+0x50>)
 800095a:	4a13      	ldr	r2, [pc, #76]	; (80009a8 <MX_I2C1_Init+0x54>)
 800095c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_I2C1_Init+0x50>)
 8000960:	4a12      	ldr	r2, [pc, #72]	; (80009ac <MX_I2C1_Init+0x58>)
 8000962:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <MX_I2C1_Init+0x50>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <MX_I2C1_Init+0x50>)
 800096c:	2200      	movs	r2, #0
 800096e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_I2C1_Init+0x50>)
 8000972:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000976:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000978:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <MX_I2C1_Init+0x50>)
 800097a:	2200      	movs	r2, #0
 800097c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_I2C1_Init+0x50>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <MX_I2C1_Init+0x50>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_I2C1_Init+0x50>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000990:	4804      	ldr	r0, [pc, #16]	; (80009a4 <MX_I2C1_Init+0x50>)
 8000992:	f001 fb0d 	bl	8001fb0 <HAL_I2C_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800099c:	f000 f8a8 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	200000c4 	.word	0x200000c4
 80009a8:	40005400 	.word	0x40005400
 80009ac:	000186a0 	.word	0x000186a0

080009b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_USART1_UART_Init+0x4c>)
 80009b6:	4a12      	ldr	r2, [pc, #72]	; (8000a00 <MX_USART1_UART_Init+0x50>)
 80009b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <MX_USART1_UART_Init+0x4c>)
 80009bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_USART1_UART_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_USART1_UART_Init+0x4c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_USART1_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_USART1_UART_Init+0x4c>)
 80009d6:	220c      	movs	r2, #12
 80009d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_USART1_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_USART1_UART_Init+0x4c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_USART1_UART_Init+0x4c>)
 80009e8:	f002 f8ec 	bl	8002bc4 <HAL_UART_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009f2:	f000 f87d 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	2000017c 	.word	0x2000017c
 8000a00:	40013800 	.word	0x40013800

08000a04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_DMA_Init+0x38>)
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	4a0b      	ldr	r2, [pc, #44]	; (8000a3c <MX_DMA_Init+0x38>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6153      	str	r3, [r2, #20]
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_DMA_Init+0x38>)
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	200b      	movs	r0, #11
 8000a28:	f000 ff2b 	bl	8001882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a2c:	200b      	movs	r0, #11
 8000a2e:	f000 ff44 	bl	80018ba <HAL_NVIC_EnableIRQ>

}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40021000 	.word	0x40021000

08000a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a46:	f107 0310 	add.w	r3, r7, #16
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a54:	4b24      	ldr	r3, [pc, #144]	; (8000ae8 <MX_GPIO_Init+0xa8>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	4a23      	ldr	r2, [pc, #140]	; (8000ae8 <MX_GPIO_Init+0xa8>)
 8000a5a:	f043 0310 	orr.w	r3, r3, #16
 8000a5e:	6193      	str	r3, [r2, #24]
 8000a60:	4b21      	ldr	r3, [pc, #132]	; (8000ae8 <MX_GPIO_Init+0xa8>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f003 0310 	and.w	r3, r3, #16
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ae8 <MX_GPIO_Init+0xa8>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	4a1d      	ldr	r2, [pc, #116]	; (8000ae8 <MX_GPIO_Init+0xa8>)
 8000a72:	f043 0320 	orr.w	r3, r3, #32
 8000a76:	6193      	str	r3, [r2, #24]
 8000a78:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <MX_GPIO_Init+0xa8>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f003 0320 	and.w	r3, r3, #32
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a84:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <MX_GPIO_Init+0xa8>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	4a17      	ldr	r2, [pc, #92]	; (8000ae8 <MX_GPIO_Init+0xa8>)
 8000a8a:	f043 0304 	orr.w	r3, r3, #4
 8000a8e:	6193      	str	r3, [r2, #24]
 8000a90:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <MX_GPIO_Init+0xa8>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f003 0304 	and.w	r3, r3, #4
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <MX_GPIO_Init+0xa8>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a11      	ldr	r2, [pc, #68]	; (8000ae8 <MX_GPIO_Init+0xa8>)
 8000aa2:	f043 0308 	orr.w	r3, r3, #8
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <MX_GPIO_Init+0xa8>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0308 	and.w	r3, r3, #8
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Green_Board_LED_GPIO_Port, Green_Board_LED_Pin, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aba:	480c      	ldr	r0, [pc, #48]	; (8000aec <MX_GPIO_Init+0xac>)
 8000abc:	f001 fa60 	bl	8001f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Green_Board_LED_Pin */
  GPIO_InitStruct.Pin = Green_Board_LED_Pin;
 8000ac0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Green_Board_LED_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 0310 	add.w	r3, r7, #16
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4804      	ldr	r0, [pc, #16]	; (8000aec <MX_GPIO_Init+0xac>)
 8000ada:	f001 f8f7 	bl	8001ccc <HAL_GPIO_Init>

}
 8000ade:	bf00      	nop
 8000ae0:	3720      	adds	r7, #32
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40011000 	.word	0x40011000

08000af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <Error_Handler+0x6>

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <HAL_MspInit+0x5c>)
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	4a14      	ldr	r2, [pc, #80]	; (8000b54 <HAL_MspInit+0x5c>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6193      	str	r3, [r2, #24]
 8000b0a:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <HAL_MspInit+0x5c>)
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b16:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <HAL_MspInit+0x5c>)
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	4a0e      	ldr	r2, [pc, #56]	; (8000b54 <HAL_MspInit+0x5c>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b20:	61d3      	str	r3, [r2, #28]
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <HAL_MspInit+0x5c>)
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <HAL_MspInit+0x60>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <HAL_MspInit+0x60>)
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	40021000 	.word	0x40021000
 8000b58:	40010000 	.word	0x40010000

08000b5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a28      	ldr	r2, [pc, #160]	; (8000c18 <HAL_ADC_MspInit+0xbc>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d149      	bne.n	8000c10 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b7c:	4b27      	ldr	r3, [pc, #156]	; (8000c1c <HAL_ADC_MspInit+0xc0>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	4a26      	ldr	r2, [pc, #152]	; (8000c1c <HAL_ADC_MspInit+0xc0>)
 8000b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b86:	6193      	str	r3, [r2, #24]
 8000b88:	4b24      	ldr	r3, [pc, #144]	; (8000c1c <HAL_ADC_MspInit+0xc0>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b94:	4b21      	ldr	r3, [pc, #132]	; (8000c1c <HAL_ADC_MspInit+0xc0>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	4a20      	ldr	r2, [pc, #128]	; (8000c1c <HAL_ADC_MspInit+0xc0>)
 8000b9a:	f043 0304 	orr.w	r3, r3, #4
 8000b9e:	6193      	str	r3, [r2, #24]
 8000ba0:	4b1e      	ldr	r3, [pc, #120]	; (8000c1c <HAL_ADC_MspInit+0xc0>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	f003 0304 	and.w	r3, r3, #4
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bac:	2301      	movs	r3, #1
 8000bae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb4:	f107 0310 	add.w	r3, r7, #16
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4819      	ldr	r0, [pc, #100]	; (8000c20 <HAL_ADC_MspInit+0xc4>)
 8000bbc:	f001 f886 	bl	8001ccc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000bc0:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <HAL_ADC_MspInit+0xc8>)
 8000bc2:	4a19      	ldr	r2, [pc, #100]	; (8000c28 <HAL_ADC_MspInit+0xcc>)
 8000bc4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bc6:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <HAL_ADC_MspInit+0xc8>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bcc:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <HAL_ADC_MspInit+0xc8>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bd2:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <HAL_ADC_MspInit+0xc8>)
 8000bd4:	2280      	movs	r2, #128	; 0x80
 8000bd6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <HAL_ADC_MspInit+0xc8>)
 8000bda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bde:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000be0:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <HAL_ADC_MspInit+0xc8>)
 8000be2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000be6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <HAL_ADC_MspInit+0xc8>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bee:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <HAL_ADC_MspInit+0xc8>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bf4:	480b      	ldr	r0, [pc, #44]	; (8000c24 <HAL_ADC_MspInit+0xc8>)
 8000bf6:	f000 fe7b 	bl	80018f0 <HAL_DMA_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000c00:	f7ff ff76 	bl	8000af0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <HAL_ADC_MspInit+0xc8>)
 8000c08:	621a      	str	r2, [r3, #32]
 8000c0a:	4a06      	ldr	r2, [pc, #24]	; (8000c24 <HAL_ADC_MspInit+0xc8>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c10:	bf00      	nop
 8000c12:	3720      	adds	r7, #32
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40012400 	.word	0x40012400
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	40010800 	.word	0x40010800
 8000c24:	200001bc 	.word	0x200001bc
 8000c28:	40020008 	.word	0x40020008

08000c2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b088      	sub	sp, #32
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 0310 	add.w	r3, r7, #16
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a15      	ldr	r2, [pc, #84]	; (8000c9c <HAL_I2C_MspInit+0x70>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d123      	bne.n	8000c94 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <HAL_I2C_MspInit+0x74>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	4a13      	ldr	r2, [pc, #76]	; (8000ca0 <HAL_I2C_MspInit+0x74>)
 8000c52:	f043 0308 	orr.w	r3, r3, #8
 8000c56:	6193      	str	r3, [r2, #24]
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <HAL_I2C_MspInit+0x74>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	f003 0308 	and.w	r3, r3, #8
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c64:	23c0      	movs	r3, #192	; 0xc0
 8000c66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c68:	2312      	movs	r3, #18
 8000c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	4619      	mov	r1, r3
 8000c76:	480b      	ldr	r0, [pc, #44]	; (8000ca4 <HAL_I2C_MspInit+0x78>)
 8000c78:	f001 f828 	bl	8001ccc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <HAL_I2C_MspInit+0x74>)
 8000c7e:	69db      	ldr	r3, [r3, #28]
 8000c80:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <HAL_I2C_MspInit+0x74>)
 8000c82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c86:	61d3      	str	r3, [r2, #28]
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <HAL_I2C_MspInit+0x74>)
 8000c8a:	69db      	ldr	r3, [r3, #28]
 8000c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c94:	bf00      	nop
 8000c96:	3720      	adds	r7, #32
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40005400 	.word	0x40005400
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	40010c00 	.word	0x40010c00

08000ca8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0310 	add.w	r3, r7, #16
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a1c      	ldr	r2, [pc, #112]	; (8000d34 <HAL_UART_MspInit+0x8c>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d131      	bne.n	8000d2c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <HAL_UART_MspInit+0x90>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	4a1a      	ldr	r2, [pc, #104]	; (8000d38 <HAL_UART_MspInit+0x90>)
 8000cce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd2:	6193      	str	r3, [r2, #24]
 8000cd4:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <HAL_UART_MspInit+0x90>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce0:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <HAL_UART_MspInit+0x90>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	4a14      	ldr	r2, [pc, #80]	; (8000d38 <HAL_UART_MspInit+0x90>)
 8000ce6:	f043 0304 	orr.w	r3, r3, #4
 8000cea:	6193      	str	r3, [r2, #24]
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <HAL_UART_MspInit+0x90>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	f003 0304 	and.w	r3, r3, #4
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cfc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d02:	2303      	movs	r3, #3
 8000d04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d06:	f107 0310 	add.w	r3, r7, #16
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	480b      	ldr	r0, [pc, #44]	; (8000d3c <HAL_UART_MspInit+0x94>)
 8000d0e:	f000 ffdd 	bl	8001ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 0310 	add.w	r3, r7, #16
 8000d24:	4619      	mov	r1, r3
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <HAL_UART_MspInit+0x94>)
 8000d28:	f000 ffd0 	bl	8001ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d2c:	bf00      	nop
 8000d2e:	3720      	adds	r7, #32
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40013800 	.word	0x40013800
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	40010800 	.word	0x40010800

08000d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <NMI_Handler+0x4>

08000d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <HardFault_Handler+0x4>

08000d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <MemManage_Handler+0x4>

08000d52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d56:	e7fe      	b.n	8000d56 <BusFault_Handler+0x4>

08000d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <UsageFault_Handler+0x4>

08000d5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr

08000d6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr

08000d76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr

08000d82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d86:	f000 f8b5 	bl	8000ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <DMA1_Channel1_IRQHandler+0x10>)
 8000d96:	f000 fe65 	bl	8001a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200001bc 	.word	0x200001bc

08000da4 <_sbrk>:
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	4a14      	ldr	r2, [pc, #80]	; (8000e00 <_sbrk+0x5c>)
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <_sbrk+0x60>)
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d102      	bne.n	8000dc6 <_sbrk+0x22>
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <_sbrk+0x64>)
 8000dc2:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <_sbrk+0x68>)
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <_sbrk+0x64>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d207      	bcs.n	8000de4 <_sbrk+0x40>
 8000dd4:	f002 f8ae 	bl	8002f34 <__errno>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	230c      	movs	r3, #12
 8000ddc:	6013      	str	r3, [r2, #0]
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
 8000de2:	e009      	b.n	8000df8 <_sbrk+0x54>
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <_sbrk+0x64>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <_sbrk+0x64>)
 8000df4:	6013      	str	r3, [r2, #0]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20005000 	.word	0x20005000
 8000e04:	00000400 	.word	0x00000400
 8000e08:	200000a4 	.word	0x200000a4
 8000e0c:	20000210 	.word	0x20000210

08000e10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <Reset_Handler>:
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	e003      	b.n	8000e28 <LoopCopyDataInit>

08000e20 <CopyDataInit>:
 8000e20:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <LoopFillZerobss+0x14>)
 8000e22:	585b      	ldr	r3, [r3, r1]
 8000e24:	5043      	str	r3, [r0, r1]
 8000e26:	3104      	adds	r1, #4

08000e28 <LoopCopyDataInit>:
 8000e28:	480a      	ldr	r0, [pc, #40]	; (8000e54 <LoopFillZerobss+0x18>)
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <LoopFillZerobss+0x1c>)
 8000e2c:	1842      	adds	r2, r0, r1
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d3f6      	bcc.n	8000e20 <CopyDataInit>
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <LoopFillZerobss+0x20>)
 8000e34:	e002      	b.n	8000e3c <LoopFillZerobss>

08000e36 <FillZerobss>:
 8000e36:	2300      	movs	r3, #0
 8000e38:	f842 3b04 	str.w	r3, [r2], #4

08000e3c <LoopFillZerobss>:
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <LoopFillZerobss+0x24>)
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d3f9      	bcc.n	8000e36 <FillZerobss>
 8000e42:	f7ff ffe5 	bl	8000e10 <SystemInit>
 8000e46:	f002 f87b 	bl	8002f40 <__libc_init_array>
 8000e4a:	f7ff fc53 	bl	80006f4 <main>
 8000e4e:	4770      	bx	lr
 8000e50:	08003870 	.word	0x08003870
 8000e54:	20000000 	.word	0x20000000
 8000e58:	20000084 	.word	0x20000084
 8000e5c:	20000084 	.word	0x20000084
 8000e60:	20000210 	.word	0x20000210

08000e64 <ADC1_2_IRQHandler>:
 8000e64:	e7fe      	b.n	8000e64 <ADC1_2_IRQHandler>
	...

08000e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <HAL_Init+0x28>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <HAL_Init+0x28>)
 8000e72:	f043 0310 	orr.w	r3, r3, #16
 8000e76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e78:	2003      	movs	r0, #3
 8000e7a:	f000 fcf7 	bl	800186c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f000 f808 	bl	8000e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e84:	f7ff fe38 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40022000 	.word	0x40022000

08000e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_InitTick+0x54>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HAL_InitTick+0x58>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 fd0f 	bl	80018d6 <HAL_SYSTICK_Config>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00e      	b.n	8000ee0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b0f      	cmp	r3, #15
 8000ec6:	d80a      	bhi.n	8000ede <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f000 fcd7 	bl	8001882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed4:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <HAL_InitTick+0x5c>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e000      	b.n	8000ee0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000014 	.word	0x20000014
 8000eec:	2000001c 	.word	0x2000001c
 8000ef0:	20000018 	.word	0x20000018

08000ef4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <HAL_IncTick+0x1c>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <HAL_IncTick+0x20>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	4a03      	ldr	r2, [pc, #12]	; (8000f14 <HAL_IncTick+0x20>)
 8000f06:	6013      	str	r3, [r2, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	2000001c 	.word	0x2000001c
 8000f14:	20000208 	.word	0x20000208

08000f18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f1c:	4b02      	ldr	r3, [pc, #8]	; (8000f28 <HAL_GetTick+0x10>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr
 8000f28:	20000208 	.word	0x20000208

08000f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f34:	f7ff fff0 	bl	8000f18 <HAL_GetTick>
 8000f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f44:	d005      	beq.n	8000f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <HAL_Delay+0x40>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4413      	add	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f52:	bf00      	nop
 8000f54:	f7ff ffe0 	bl	8000f18 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d8f7      	bhi.n	8000f54 <HAL_Delay+0x28>
  {
  }
}
 8000f64:	bf00      	nop
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	2000001c 	.word	0x2000001c

08000f70 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000f80:	2300      	movs	r3, #0
 8000f82:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e0be      	b.n	8001110 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d109      	bne.n	8000fb4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff fdd4 	bl	8000b5c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f000 faed 	bl	8001594 <ADC_ConversionStop_Disable>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc2:	f003 0310 	and.w	r3, r3, #16
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f040 8099 	bne.w	80010fe <HAL_ADC_Init+0x18e>
 8000fcc:	7dfb      	ldrb	r3, [r7, #23]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f040 8095 	bne.w	80010fe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fdc:	f023 0302 	bic.w	r3, r3, #2
 8000fe0:	f043 0202 	orr.w	r2, r3, #2
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ff0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	7b1b      	ldrb	r3, [r3, #12]
 8000ff6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ff8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001008:	d003      	beq.n	8001012 <HAL_ADC_Init+0xa2>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d102      	bne.n	8001018 <HAL_ADC_Init+0xa8>
 8001012:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001016:	e000      	b.n	800101a <HAL_ADC_Init+0xaa>
 8001018:	2300      	movs	r3, #0
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	7d1b      	ldrb	r3, [r3, #20]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d119      	bne.n	800105c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	7b1b      	ldrb	r3, [r3, #12]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d109      	bne.n	8001044 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	3b01      	subs	r3, #1
 8001036:	035a      	lsls	r2, r3, #13
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	4313      	orrs	r3, r2
 800103c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	e00b      	b.n	800105c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001048:	f043 0220 	orr.w	r2, r3, #32
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001054:	f043 0201 	orr.w	r2, r3, #1
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	430a      	orrs	r2, r1
 800106e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	689a      	ldr	r2, [r3, #8]
 8001076:	4b28      	ldr	r3, [pc, #160]	; (8001118 <HAL_ADC_Init+0x1a8>)
 8001078:	4013      	ands	r3, r2
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	6812      	ldr	r2, [r2, #0]
 800107e:	68b9      	ldr	r1, [r7, #8]
 8001080:	430b      	orrs	r3, r1
 8001082:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800108c:	d003      	beq.n	8001096 <HAL_ADC_Init+0x126>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d104      	bne.n	80010a0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	3b01      	subs	r3, #1
 800109c:	051b      	lsls	r3, r3, #20
 800109e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	430a      	orrs	r2, r1
 80010b2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689a      	ldr	r2, [r3, #8]
 80010ba:	4b18      	ldr	r3, [pc, #96]	; (800111c <HAL_ADC_Init+0x1ac>)
 80010bc:	4013      	ands	r3, r2
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d10b      	bne.n	80010dc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ce:	f023 0303 	bic.w	r3, r3, #3
 80010d2:	f043 0201 	orr.w	r2, r3, #1
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010da:	e018      	b.n	800110e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e0:	f023 0312 	bic.w	r3, r3, #18
 80010e4:	f043 0210 	orr.w	r2, r3, #16
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f0:	f043 0201 	orr.w	r2, r3, #1
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010fc:	e007      	b.n	800110e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001102:	f043 0210 	orr.w	r2, r3, #16
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800110e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	ffe1f7fd 	.word	0xffe1f7fd
 800111c:	ff1f0efe 	.word	0xff1f0efe

08001120 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800112c:	2300      	movs	r3, #0
 800112e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a64      	ldr	r2, [pc, #400]	; (80012c8 <HAL_ADC_Start_DMA+0x1a8>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d004      	beq.n	8001144 <HAL_ADC_Start_DMA+0x24>
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a63      	ldr	r2, [pc, #396]	; (80012cc <HAL_ADC_Start_DMA+0x1ac>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d106      	bne.n	8001152 <HAL_ADC_Start_DMA+0x32>
 8001144:	4b60      	ldr	r3, [pc, #384]	; (80012c8 <HAL_ADC_Start_DMA+0x1a8>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800114c:	2b00      	cmp	r3, #0
 800114e:	f040 80b3 	bne.w	80012b8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001158:	2b01      	cmp	r3, #1
 800115a:	d101      	bne.n	8001160 <HAL_ADC_Start_DMA+0x40>
 800115c:	2302      	movs	r3, #2
 800115e:	e0ae      	b.n	80012be <HAL_ADC_Start_DMA+0x19e>
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2201      	movs	r2, #1
 8001164:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001168:	68f8      	ldr	r0, [r7, #12]
 800116a:	f000 f9c1 	bl	80014f0 <ADC_Enable>
 800116e:	4603      	mov	r3, r0
 8001170:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001172:	7dfb      	ldrb	r3, [r7, #23]
 8001174:	2b00      	cmp	r3, #0
 8001176:	f040 809a 	bne.w	80012ae <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800117e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001182:	f023 0301 	bic.w	r3, r3, #1
 8001186:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a4e      	ldr	r2, [pc, #312]	; (80012cc <HAL_ADC_Start_DMA+0x1ac>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d105      	bne.n	80011a4 <HAL_ADC_Start_DMA+0x84>
 8001198:	4b4b      	ldr	r3, [pc, #300]	; (80012c8 <HAL_ADC_Start_DMA+0x1a8>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d115      	bne.n	80011d0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d026      	beq.n	800120c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011ce:	e01d      	b.n	800120c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a39      	ldr	r2, [pc, #228]	; (80012c8 <HAL_ADC_Start_DMA+0x1a8>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d004      	beq.n	80011f0 <HAL_ADC_Start_DMA+0xd0>
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a38      	ldr	r2, [pc, #224]	; (80012cc <HAL_ADC_Start_DMA+0x1ac>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d10d      	bne.n	800120c <HAL_ADC_Start_DMA+0xec>
 80011f0:	4b35      	ldr	r3, [pc, #212]	; (80012c8 <HAL_ADC_Start_DMA+0x1a8>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d007      	beq.n	800120c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001200:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001204:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001210:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d006      	beq.n	8001226 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121c:	f023 0206 	bic.w	r2, r3, #6
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	62da      	str	r2, [r3, #44]	; 0x2c
 8001224:	e002      	b.n	800122c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2200      	movs	r2, #0
 800122a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	4a25      	ldr	r2, [pc, #148]	; (80012d0 <HAL_ADC_Start_DMA+0x1b0>)
 800123a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	4a24      	ldr	r2, [pc, #144]	; (80012d4 <HAL_ADC_Start_DMA+0x1b4>)
 8001242:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6a1b      	ldr	r3, [r3, #32]
 8001248:	4a23      	ldr	r2, [pc, #140]	; (80012d8 <HAL_ADC_Start_DMA+0x1b8>)
 800124a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f06f 0202 	mvn.w	r2, #2
 8001254:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001264:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6a18      	ldr	r0, [r3, #32]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	334c      	adds	r3, #76	; 0x4c
 8001270:	4619      	mov	r1, r3
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f000 fb95 	bl	80019a4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001284:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001288:	d108      	bne.n	800129c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001298:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800129a:	e00f      	b.n	80012bc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80012aa:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80012ac:	e006      	b.n	80012bc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80012b6:	e001      	b.n	80012bc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40012400 	.word	0x40012400
 80012cc:	40012800 	.word	0x40012800
 80012d0:	08001609 	.word	0x08001609
 80012d4:	08001685 	.word	0x08001685
 80012d8:	080016a1 	.word	0x080016a1

080012dc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr

080012ee <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr

08001300 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800130a:	2300      	movs	r3, #0
 800130c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001318:	2b01      	cmp	r3, #1
 800131a:	d101      	bne.n	8001320 <HAL_ADC_ConfigChannel+0x20>
 800131c:	2302      	movs	r3, #2
 800131e:	e0dc      	b.n	80014da <HAL_ADC_ConfigChannel+0x1da>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2201      	movs	r2, #1
 8001324:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2b06      	cmp	r3, #6
 800132e:	d81c      	bhi.n	800136a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685a      	ldr	r2, [r3, #4]
 800133a:	4613      	mov	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	3b05      	subs	r3, #5
 8001342:	221f      	movs	r2, #31
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	4019      	ands	r1, r3
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	6818      	ldr	r0, [r3, #0]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	4613      	mov	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	3b05      	subs	r3, #5
 800135c:	fa00 f203 	lsl.w	r2, r0, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	430a      	orrs	r2, r1
 8001366:	635a      	str	r2, [r3, #52]	; 0x34
 8001368:	e03c      	b.n	80013e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b0c      	cmp	r3, #12
 8001370:	d81c      	bhi.n	80013ac <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	4613      	mov	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	3b23      	subs	r3, #35	; 0x23
 8001384:	221f      	movs	r2, #31
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	4019      	ands	r1, r3
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	3b23      	subs	r3, #35	; 0x23
 800139e:	fa00 f203 	lsl.w	r2, r0, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	631a      	str	r2, [r3, #48]	; 0x30
 80013aa:	e01b      	b.n	80013e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	4613      	mov	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	3b41      	subs	r3, #65	; 0x41
 80013be:	221f      	movs	r2, #31
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	4019      	ands	r1, r3
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	6818      	ldr	r0, [r3, #0]
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	3b41      	subs	r3, #65	; 0x41
 80013d8:	fa00 f203 	lsl.w	r2, r0, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	430a      	orrs	r2, r1
 80013e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b09      	cmp	r3, #9
 80013ea:	d91c      	bls.n	8001426 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	68d9      	ldr	r1, [r3, #12]
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	4613      	mov	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4413      	add	r3, r2
 80013fc:	3b1e      	subs	r3, #30
 80013fe:	2207      	movs	r2, #7
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	4019      	ands	r1, r3
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	6898      	ldr	r0, [r3, #8]
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4613      	mov	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	4413      	add	r3, r2
 8001416:	3b1e      	subs	r3, #30
 8001418:	fa00 f203 	lsl.w	r2, r0, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	430a      	orrs	r2, r1
 8001422:	60da      	str	r2, [r3, #12]
 8001424:	e019      	b.n	800145a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6919      	ldr	r1, [r3, #16]
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4613      	mov	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4413      	add	r3, r2
 8001436:	2207      	movs	r2, #7
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	4019      	ands	r1, r3
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	6898      	ldr	r0, [r3, #8]
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4613      	mov	r3, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4413      	add	r3, r2
 800144e:	fa00 f203 	lsl.w	r2, r0, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	430a      	orrs	r2, r1
 8001458:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b10      	cmp	r3, #16
 8001460:	d003      	beq.n	800146a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001466:	2b11      	cmp	r3, #17
 8001468:	d132      	bne.n	80014d0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a1d      	ldr	r2, [pc, #116]	; (80014e4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d125      	bne.n	80014c0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d126      	bne.n	80014d0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001490:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b10      	cmp	r3, #16
 8001498:	d11a      	bne.n	80014d0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800149a:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <HAL_ADC_ConfigChannel+0x1e8>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a13      	ldr	r2, [pc, #76]	; (80014ec <HAL_ADC_ConfigChannel+0x1ec>)
 80014a0:	fba2 2303 	umull	r2, r3, r2, r3
 80014a4:	0c9a      	lsrs	r2, r3, #18
 80014a6:	4613      	mov	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014b0:	e002      	b.n	80014b8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	3b01      	subs	r3, #1
 80014b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f9      	bne.n	80014b2 <HAL_ADC_ConfigChannel+0x1b2>
 80014be:	e007      	b.n	80014d0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c4:	f043 0220 	orr.w	r2, r3, #32
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr
 80014e4:	40012400 	.word	0x40012400
 80014e8:	20000014 	.word	0x20000014
 80014ec:	431bde83 	.word	0x431bde83

080014f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b01      	cmp	r3, #1
 800150c:	d039      	beq.n	8001582 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f042 0201 	orr.w	r2, r2, #1
 800151c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800151e:	4b1b      	ldr	r3, [pc, #108]	; (800158c <ADC_Enable+0x9c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a1b      	ldr	r2, [pc, #108]	; (8001590 <ADC_Enable+0xa0>)
 8001524:	fba2 2303 	umull	r2, r3, r2, r3
 8001528:	0c9b      	lsrs	r3, r3, #18
 800152a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800152c:	e002      	b.n	8001534 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	3b01      	subs	r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f9      	bne.n	800152e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800153a:	f7ff fced 	bl	8000f18 <HAL_GetTick>
 800153e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001540:	e018      	b.n	8001574 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001542:	f7ff fce9 	bl	8000f18 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d911      	bls.n	8001574 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001554:	f043 0210 	orr.w	r2, r3, #16
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001560:	f043 0201 	orr.w	r2, r3, #1
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e007      	b.n	8001584 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b01      	cmp	r3, #1
 8001580:	d1df      	bne.n	8001542 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000014 	.word	0x20000014
 8001590:	431bde83 	.word	0x431bde83

08001594 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d127      	bne.n	80015fe <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 0201 	bic.w	r2, r2, #1
 80015bc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015be:	f7ff fcab 	bl	8000f18 <HAL_GetTick>
 80015c2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80015c4:	e014      	b.n	80015f0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80015c6:	f7ff fca7 	bl	8000f18 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d90d      	bls.n	80015f0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d8:	f043 0210 	orr.w	r2, r3, #16
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e4:	f043 0201 	orr.w	r2, r3, #1
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e007      	b.n	8001600 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d0e3      	beq.n	80015c6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001614:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800161e:	2b00      	cmp	r3, #0
 8001620:	d127      	bne.n	8001672 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001626:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001638:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800163c:	d115      	bne.n	800166a <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001642:	2b00      	cmp	r3, #0
 8001644:	d111      	bne.n	800166a <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001656:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d105      	bne.n	800166a <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001662:	f043 0201 	orr.w	r2, r3, #1
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	f7ff f81e 	bl	80006ac <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001670:	e004      	b.n	800167c <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	4798      	blx	r3
}
 800167c:	bf00      	nop
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001690:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001692:	68f8      	ldr	r0, [r7, #12]
 8001694:	f7ff fe22 	bl	80012dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001698:	bf00      	nop
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ac:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016be:	f043 0204 	orr.w	r2, r3, #4
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f7ff fe11 	bl	80012ee <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80016cc:	bf00      	nop
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f0:	4013      	ands	r3, r2
 80016f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001706:	4a04      	ldr	r2, [pc, #16]	; (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	60d3      	str	r3, [r2, #12]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <__NVIC_GetPriorityGrouping+0x18>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	0a1b      	lsrs	r3, r3, #8
 8001726:	f003 0307 	and.w	r3, r3, #7
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	2b00      	cmp	r3, #0
 8001748:	db0b      	blt.n	8001762 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	f003 021f 	and.w	r2, r3, #31
 8001750:	4906      	ldr	r1, [pc, #24]	; (800176c <__NVIC_EnableIRQ+0x34>)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	095b      	lsrs	r3, r3, #5
 8001758:	2001      	movs	r0, #1
 800175a:	fa00 f202 	lsl.w	r2, r0, r2
 800175e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	e000e100 	.word	0xe000e100

08001770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	6039      	str	r1, [r7, #0]
 800177a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	2b00      	cmp	r3, #0
 8001782:	db0a      	blt.n	800179a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	b2da      	uxtb	r2, r3
 8001788:	490c      	ldr	r1, [pc, #48]	; (80017bc <__NVIC_SetPriority+0x4c>)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	0112      	lsls	r2, r2, #4
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	440b      	add	r3, r1
 8001794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001798:	e00a      	b.n	80017b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4908      	ldr	r1, [pc, #32]	; (80017c0 <__NVIC_SetPriority+0x50>)
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	3b04      	subs	r3, #4
 80017a8:	0112      	lsls	r2, r2, #4
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	440b      	add	r3, r1
 80017ae:	761a      	strb	r2, [r3, #24]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000e100 	.word	0xe000e100
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b089      	sub	sp, #36	; 0x24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f1c3 0307 	rsb	r3, r3, #7
 80017de:	2b04      	cmp	r3, #4
 80017e0:	bf28      	it	cs
 80017e2:	2304      	movcs	r3, #4
 80017e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3304      	adds	r3, #4
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	d902      	bls.n	80017f4 <NVIC_EncodePriority+0x30>
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3b03      	subs	r3, #3
 80017f2:	e000      	b.n	80017f6 <NVIC_EncodePriority+0x32>
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	f04f 32ff 	mov.w	r2, #4294967295
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43da      	mvns	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	401a      	ands	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800180c:	f04f 31ff 	mov.w	r1, #4294967295
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	43d9      	mvns	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	4313      	orrs	r3, r2
         );
}
 800181e:	4618      	mov	r0, r3
 8001820:	3724      	adds	r7, #36	; 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3b01      	subs	r3, #1
 8001834:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001838:	d301      	bcc.n	800183e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800183a:	2301      	movs	r3, #1
 800183c:	e00f      	b.n	800185e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800183e:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <SysTick_Config+0x40>)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001846:	210f      	movs	r1, #15
 8001848:	f04f 30ff 	mov.w	r0, #4294967295
 800184c:	f7ff ff90 	bl	8001770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <SysTick_Config+0x40>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001856:	4b04      	ldr	r3, [pc, #16]	; (8001868 <SysTick_Config+0x40>)
 8001858:	2207      	movs	r2, #7
 800185a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	e000e010 	.word	0xe000e010

0800186c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ff2d 	bl	80016d4 <__NVIC_SetPriorityGrouping>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001882:	b580      	push	{r7, lr}
 8001884:	b086      	sub	sp, #24
 8001886:	af00      	add	r7, sp, #0
 8001888:	4603      	mov	r3, r0
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
 800188e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001894:	f7ff ff42 	bl	800171c <__NVIC_GetPriorityGrouping>
 8001898:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	68b9      	ldr	r1, [r7, #8]
 800189e:	6978      	ldr	r0, [r7, #20]
 80018a0:	f7ff ff90 	bl	80017c4 <NVIC_EncodePriority>
 80018a4:	4602      	mov	r2, r0
 80018a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018aa:	4611      	mov	r1, r2
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff5f 	bl	8001770 <__NVIC_SetPriority>
}
 80018b2:	bf00      	nop
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4603      	mov	r3, r0
 80018c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff35 	bl	8001738 <__NVIC_EnableIRQ>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff ffa2 	bl	8001828 <SysTick_Config>
 80018e4:	4603      	mov	r3, r0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e043      	b.n	800198e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	4b22      	ldr	r3, [pc, #136]	; (8001998 <HAL_DMA_Init+0xa8>)
 800190e:	4413      	add	r3, r2
 8001910:	4a22      	ldr	r2, [pc, #136]	; (800199c <HAL_DMA_Init+0xac>)
 8001912:	fba2 2303 	umull	r2, r3, r2, r3
 8001916:	091b      	lsrs	r3, r3, #4
 8001918:	009a      	lsls	r2, r3, #2
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a1f      	ldr	r2, [pc, #124]	; (80019a0 <HAL_DMA_Init+0xb0>)
 8001922:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2202      	movs	r2, #2
 8001928:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800193a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800193e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001948:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001954:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001960:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	4313      	orrs	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3714      	adds	r7, #20
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr
 8001998:	bffdfff8 	.word	0xbffdfff8
 800199c:	cccccccd 	.word	0xcccccccd
 80019a0:	40020000 	.word	0x40020000

080019a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
 80019b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019b2:	2300      	movs	r3, #0
 80019b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d101      	bne.n	80019c4 <HAL_DMA_Start_IT+0x20>
 80019c0:	2302      	movs	r3, #2
 80019c2:	e04a      	b.n	8001a5a <HAL_DMA_Start_IT+0xb6>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d13a      	bne.n	8001a4c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2202      	movs	r2, #2
 80019da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0201 	bic.w	r2, r2, #1
 80019f2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	68b9      	ldr	r1, [r7, #8]
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f000 f938 	bl	8001c70 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d008      	beq.n	8001a1a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 020e 	orr.w	r2, r2, #14
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	e00f      	b.n	8001a3a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 0204 	bic.w	r2, r2, #4
 8001a28:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f042 020a 	orr.w	r2, r2, #10
 8001a38:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f042 0201 	orr.w	r2, r2, #1
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	e005      	b.n	8001a58 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a54:	2302      	movs	r3, #2
 8001a56:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	2204      	movs	r2, #4
 8001a82:	409a      	lsls	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4013      	ands	r3, r2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d04f      	beq.n	8001b2c <HAL_DMA_IRQHandler+0xc8>
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d04a      	beq.n	8001b2c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0320 	and.w	r3, r3, #32
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d107      	bne.n	8001ab4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0204 	bic.w	r2, r2, #4
 8001ab2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a66      	ldr	r2, [pc, #408]	; (8001c54 <HAL_DMA_IRQHandler+0x1f0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d029      	beq.n	8001b12 <HAL_DMA_IRQHandler+0xae>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a65      	ldr	r2, [pc, #404]	; (8001c58 <HAL_DMA_IRQHandler+0x1f4>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d022      	beq.n	8001b0e <HAL_DMA_IRQHandler+0xaa>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a63      	ldr	r2, [pc, #396]	; (8001c5c <HAL_DMA_IRQHandler+0x1f8>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d01a      	beq.n	8001b08 <HAL_DMA_IRQHandler+0xa4>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a62      	ldr	r2, [pc, #392]	; (8001c60 <HAL_DMA_IRQHandler+0x1fc>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d012      	beq.n	8001b02 <HAL_DMA_IRQHandler+0x9e>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a60      	ldr	r2, [pc, #384]	; (8001c64 <HAL_DMA_IRQHandler+0x200>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d00a      	beq.n	8001afc <HAL_DMA_IRQHandler+0x98>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a5f      	ldr	r2, [pc, #380]	; (8001c68 <HAL_DMA_IRQHandler+0x204>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d102      	bne.n	8001af6 <HAL_DMA_IRQHandler+0x92>
 8001af0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001af4:	e00e      	b.n	8001b14 <HAL_DMA_IRQHandler+0xb0>
 8001af6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001afa:	e00b      	b.n	8001b14 <HAL_DMA_IRQHandler+0xb0>
 8001afc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b00:	e008      	b.n	8001b14 <HAL_DMA_IRQHandler+0xb0>
 8001b02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b06:	e005      	b.n	8001b14 <HAL_DMA_IRQHandler+0xb0>
 8001b08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b0c:	e002      	b.n	8001b14 <HAL_DMA_IRQHandler+0xb0>
 8001b0e:	2340      	movs	r3, #64	; 0x40
 8001b10:	e000      	b.n	8001b14 <HAL_DMA_IRQHandler+0xb0>
 8001b12:	2304      	movs	r3, #4
 8001b14:	4a55      	ldr	r2, [pc, #340]	; (8001c6c <HAL_DMA_IRQHandler+0x208>)
 8001b16:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 8094 	beq.w	8001c4a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001b2a:	e08e      	b.n	8001c4a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	2202      	movs	r2, #2
 8001b32:	409a      	lsls	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4013      	ands	r3, r2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d056      	beq.n	8001bea <HAL_DMA_IRQHandler+0x186>
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d051      	beq.n	8001bea <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0320 	and.w	r3, r3, #32
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d10b      	bne.n	8001b6c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 020a 	bic.w	r2, r2, #10
 8001b62:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a38      	ldr	r2, [pc, #224]	; (8001c54 <HAL_DMA_IRQHandler+0x1f0>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d029      	beq.n	8001bca <HAL_DMA_IRQHandler+0x166>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a37      	ldr	r2, [pc, #220]	; (8001c58 <HAL_DMA_IRQHandler+0x1f4>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d022      	beq.n	8001bc6 <HAL_DMA_IRQHandler+0x162>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a35      	ldr	r2, [pc, #212]	; (8001c5c <HAL_DMA_IRQHandler+0x1f8>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d01a      	beq.n	8001bc0 <HAL_DMA_IRQHandler+0x15c>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a34      	ldr	r2, [pc, #208]	; (8001c60 <HAL_DMA_IRQHandler+0x1fc>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d012      	beq.n	8001bba <HAL_DMA_IRQHandler+0x156>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a32      	ldr	r2, [pc, #200]	; (8001c64 <HAL_DMA_IRQHandler+0x200>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d00a      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0x150>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a31      	ldr	r2, [pc, #196]	; (8001c68 <HAL_DMA_IRQHandler+0x204>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d102      	bne.n	8001bae <HAL_DMA_IRQHandler+0x14a>
 8001ba8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001bac:	e00e      	b.n	8001bcc <HAL_DMA_IRQHandler+0x168>
 8001bae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bb2:	e00b      	b.n	8001bcc <HAL_DMA_IRQHandler+0x168>
 8001bb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bb8:	e008      	b.n	8001bcc <HAL_DMA_IRQHandler+0x168>
 8001bba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bbe:	e005      	b.n	8001bcc <HAL_DMA_IRQHandler+0x168>
 8001bc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bc4:	e002      	b.n	8001bcc <HAL_DMA_IRQHandler+0x168>
 8001bc6:	2320      	movs	r3, #32
 8001bc8:	e000      	b.n	8001bcc <HAL_DMA_IRQHandler+0x168>
 8001bca:	2302      	movs	r3, #2
 8001bcc:	4a27      	ldr	r2, [pc, #156]	; (8001c6c <HAL_DMA_IRQHandler+0x208>)
 8001bce:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d034      	beq.n	8001c4a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001be8:	e02f      	b.n	8001c4a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	2208      	movs	r2, #8
 8001bf0:	409a      	lsls	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d028      	beq.n	8001c4c <HAL_DMA_IRQHandler+0x1e8>
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	f003 0308 	and.w	r3, r3, #8
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d023      	beq.n	8001c4c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 020e 	bic.w	r2, r2, #14
 8001c12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c22:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d004      	beq.n	8001c4c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	4798      	blx	r3
    }
  }
  return;
 8001c4a:	bf00      	nop
 8001c4c:	bf00      	nop
}
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40020008 	.word	0x40020008
 8001c58:	4002001c 	.word	0x4002001c
 8001c5c:	40020030 	.word	0x40020030
 8001c60:	40020044 	.word	0x40020044
 8001c64:	40020058 	.word	0x40020058
 8001c68:	4002006c 	.word	0x4002006c
 8001c6c:	40020000 	.word	0x40020000

08001c70 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
 8001c7c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c86:	2101      	movs	r1, #1
 8001c88:	fa01 f202 	lsl.w	r2, r1, r2
 8001c8c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b10      	cmp	r3, #16
 8001c9c:	d108      	bne.n	8001cb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001cae:	e007      	b.n	8001cc0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68ba      	ldr	r2, [r7, #8]
 8001cb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	60da      	str	r2, [r3, #12]
}
 8001cc0:	bf00      	nop
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr
	...

08001ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b08b      	sub	sp, #44	; 0x2c
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cde:	e127      	b.n	8001f30 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	69fa      	ldr	r2, [r7, #28]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	f040 8116 	bne.w	8001f2a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b12      	cmp	r3, #18
 8001d04:	d034      	beq.n	8001d70 <HAL_GPIO_Init+0xa4>
 8001d06:	2b12      	cmp	r3, #18
 8001d08:	d80d      	bhi.n	8001d26 <HAL_GPIO_Init+0x5a>
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d02b      	beq.n	8001d66 <HAL_GPIO_Init+0x9a>
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d804      	bhi.n	8001d1c <HAL_GPIO_Init+0x50>
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d031      	beq.n	8001d7a <HAL_GPIO_Init+0xae>
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d01c      	beq.n	8001d54 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d1a:	e048      	b.n	8001dae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d1c:	2b03      	cmp	r3, #3
 8001d1e:	d043      	beq.n	8001da8 <HAL_GPIO_Init+0xdc>
 8001d20:	2b11      	cmp	r3, #17
 8001d22:	d01b      	beq.n	8001d5c <HAL_GPIO_Init+0x90>
          break;
 8001d24:	e043      	b.n	8001dae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d26:	4a89      	ldr	r2, [pc, #548]	; (8001f4c <HAL_GPIO_Init+0x280>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d026      	beq.n	8001d7a <HAL_GPIO_Init+0xae>
 8001d2c:	4a87      	ldr	r2, [pc, #540]	; (8001f4c <HAL_GPIO_Init+0x280>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d806      	bhi.n	8001d40 <HAL_GPIO_Init+0x74>
 8001d32:	4a87      	ldr	r2, [pc, #540]	; (8001f50 <HAL_GPIO_Init+0x284>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d020      	beq.n	8001d7a <HAL_GPIO_Init+0xae>
 8001d38:	4a86      	ldr	r2, [pc, #536]	; (8001f54 <HAL_GPIO_Init+0x288>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d01d      	beq.n	8001d7a <HAL_GPIO_Init+0xae>
          break;
 8001d3e:	e036      	b.n	8001dae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d40:	4a85      	ldr	r2, [pc, #532]	; (8001f58 <HAL_GPIO_Init+0x28c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d019      	beq.n	8001d7a <HAL_GPIO_Init+0xae>
 8001d46:	4a85      	ldr	r2, [pc, #532]	; (8001f5c <HAL_GPIO_Init+0x290>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d016      	beq.n	8001d7a <HAL_GPIO_Init+0xae>
 8001d4c:	4a84      	ldr	r2, [pc, #528]	; (8001f60 <HAL_GPIO_Init+0x294>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d013      	beq.n	8001d7a <HAL_GPIO_Init+0xae>
          break;
 8001d52:	e02c      	b.n	8001dae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	623b      	str	r3, [r7, #32]
          break;
 8001d5a:	e028      	b.n	8001dae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	3304      	adds	r3, #4
 8001d62:	623b      	str	r3, [r7, #32]
          break;
 8001d64:	e023      	b.n	8001dae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	3308      	adds	r3, #8
 8001d6c:	623b      	str	r3, [r7, #32]
          break;
 8001d6e:	e01e      	b.n	8001dae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	330c      	adds	r3, #12
 8001d76:	623b      	str	r3, [r7, #32]
          break;
 8001d78:	e019      	b.n	8001dae <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d102      	bne.n	8001d88 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d82:	2304      	movs	r3, #4
 8001d84:	623b      	str	r3, [r7, #32]
          break;
 8001d86:	e012      	b.n	8001dae <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d105      	bne.n	8001d9c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d90:	2308      	movs	r3, #8
 8001d92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69fa      	ldr	r2, [r7, #28]
 8001d98:	611a      	str	r2, [r3, #16]
          break;
 8001d9a:	e008      	b.n	8001dae <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d9c:	2308      	movs	r3, #8
 8001d9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	69fa      	ldr	r2, [r7, #28]
 8001da4:	615a      	str	r2, [r3, #20]
          break;
 8001da6:	e002      	b.n	8001dae <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001da8:	2300      	movs	r3, #0
 8001daa:	623b      	str	r3, [r7, #32]
          break;
 8001dac:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	2bff      	cmp	r3, #255	; 0xff
 8001db2:	d801      	bhi.n	8001db8 <HAL_GPIO_Init+0xec>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	e001      	b.n	8001dbc <HAL_GPIO_Init+0xf0>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3304      	adds	r3, #4
 8001dbc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	2bff      	cmp	r3, #255	; 0xff
 8001dc2:	d802      	bhi.n	8001dca <HAL_GPIO_Init+0xfe>
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	e002      	b.n	8001dd0 <HAL_GPIO_Init+0x104>
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	3b08      	subs	r3, #8
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	210f      	movs	r1, #15
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	401a      	ands	r2, r3
 8001de2:	6a39      	ldr	r1, [r7, #32]
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dea:	431a      	orrs	r2, r3
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 8096 	beq.w	8001f2a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dfe:	4b59      	ldr	r3, [pc, #356]	; (8001f64 <HAL_GPIO_Init+0x298>)
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	4a58      	ldr	r2, [pc, #352]	; (8001f64 <HAL_GPIO_Init+0x298>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6193      	str	r3, [r2, #24]
 8001e0a:	4b56      	ldr	r3, [pc, #344]	; (8001f64 <HAL_GPIO_Init+0x298>)
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e16:	4a54      	ldr	r2, [pc, #336]	; (8001f68 <HAL_GPIO_Init+0x29c>)
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	089b      	lsrs	r3, r3, #2
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e22:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	220f      	movs	r2, #15
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	4013      	ands	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a4b      	ldr	r2, [pc, #300]	; (8001f6c <HAL_GPIO_Init+0x2a0>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d013      	beq.n	8001e6a <HAL_GPIO_Init+0x19e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a4a      	ldr	r2, [pc, #296]	; (8001f70 <HAL_GPIO_Init+0x2a4>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d00d      	beq.n	8001e66 <HAL_GPIO_Init+0x19a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a49      	ldr	r2, [pc, #292]	; (8001f74 <HAL_GPIO_Init+0x2a8>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d007      	beq.n	8001e62 <HAL_GPIO_Init+0x196>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a48      	ldr	r2, [pc, #288]	; (8001f78 <HAL_GPIO_Init+0x2ac>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d101      	bne.n	8001e5e <HAL_GPIO_Init+0x192>
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e006      	b.n	8001e6c <HAL_GPIO_Init+0x1a0>
 8001e5e:	2304      	movs	r3, #4
 8001e60:	e004      	b.n	8001e6c <HAL_GPIO_Init+0x1a0>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e002      	b.n	8001e6c <HAL_GPIO_Init+0x1a0>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <HAL_GPIO_Init+0x1a0>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e6e:	f002 0203 	and.w	r2, r2, #3
 8001e72:	0092      	lsls	r2, r2, #2
 8001e74:	4093      	lsls	r3, r2
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e7c:	493a      	ldr	r1, [pc, #232]	; (8001f68 <HAL_GPIO_Init+0x29c>)
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	089b      	lsrs	r3, r3, #2
 8001e82:	3302      	adds	r3, #2
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d006      	beq.n	8001ea4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e96:	4b39      	ldr	r3, [pc, #228]	; (8001f7c <HAL_GPIO_Init+0x2b0>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	4938      	ldr	r1, [pc, #224]	; (8001f7c <HAL_GPIO_Init+0x2b0>)
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	600b      	str	r3, [r1, #0]
 8001ea2:	e006      	b.n	8001eb2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ea4:	4b35      	ldr	r3, [pc, #212]	; (8001f7c <HAL_GPIO_Init+0x2b0>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	4933      	ldr	r1, [pc, #204]	; (8001f7c <HAL_GPIO_Init+0x2b0>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d006      	beq.n	8001ecc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ebe:	4b2f      	ldr	r3, [pc, #188]	; (8001f7c <HAL_GPIO_Init+0x2b0>)
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	492e      	ldr	r1, [pc, #184]	; (8001f7c <HAL_GPIO_Init+0x2b0>)
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	604b      	str	r3, [r1, #4]
 8001eca:	e006      	b.n	8001eda <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ecc:	4b2b      	ldr	r3, [pc, #172]	; (8001f7c <HAL_GPIO_Init+0x2b0>)
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	4929      	ldr	r1, [pc, #164]	; (8001f7c <HAL_GPIO_Init+0x2b0>)
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d006      	beq.n	8001ef4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ee6:	4b25      	ldr	r3, [pc, #148]	; (8001f7c <HAL_GPIO_Init+0x2b0>)
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	4924      	ldr	r1, [pc, #144]	; (8001f7c <HAL_GPIO_Init+0x2b0>)
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	608b      	str	r3, [r1, #8]
 8001ef2:	e006      	b.n	8001f02 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ef4:	4b21      	ldr	r3, [pc, #132]	; (8001f7c <HAL_GPIO_Init+0x2b0>)
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	43db      	mvns	r3, r3
 8001efc:	491f      	ldr	r1, [pc, #124]	; (8001f7c <HAL_GPIO_Init+0x2b0>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d006      	beq.n	8001f1c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f0e:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <HAL_GPIO_Init+0x2b0>)
 8001f10:	68da      	ldr	r2, [r3, #12]
 8001f12:	491a      	ldr	r1, [pc, #104]	; (8001f7c <HAL_GPIO_Init+0x2b0>)
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	60cb      	str	r3, [r1, #12]
 8001f1a:	e006      	b.n	8001f2a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f1c:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <HAL_GPIO_Init+0x2b0>)
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	43db      	mvns	r3, r3
 8001f24:	4915      	ldr	r1, [pc, #84]	; (8001f7c <HAL_GPIO_Init+0x2b0>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f47f aed0 	bne.w	8001ce0 <HAL_GPIO_Init+0x14>
  }
}
 8001f40:	bf00      	nop
 8001f42:	372c      	adds	r7, #44	; 0x2c
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	10210000 	.word	0x10210000
 8001f50:	10110000 	.word	0x10110000
 8001f54:	10120000 	.word	0x10120000
 8001f58:	10310000 	.word	0x10310000
 8001f5c:	10320000 	.word	0x10320000
 8001f60:	10220000 	.word	0x10220000
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40010000 	.word	0x40010000
 8001f6c:	40010800 	.word	0x40010800
 8001f70:	40010c00 	.word	0x40010c00
 8001f74:	40011000 	.word	0x40011000
 8001f78:	40011400 	.word	0x40011400
 8001f7c:	40010400 	.word	0x40010400

08001f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	807b      	strh	r3, [r7, #2]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f90:	787b      	ldrb	r3, [r7, #1]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f96:	887a      	ldrh	r2, [r7, #2]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f9c:	e003      	b.n	8001fa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f9e:	887b      	ldrh	r3, [r7, #2]
 8001fa0:	041a      	lsls	r2, r3, #16
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	611a      	str	r2, [r3, #16]
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr

08001fb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e11f      	b.n	8002202 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d106      	bne.n	8001fdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7fe fe28 	bl	8000c2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2224      	movs	r2, #36	; 0x24
 8001fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0201 	bic.w	r2, r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002002:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002012:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002014:	f000 fcda 	bl	80029cc <HAL_RCC_GetPCLK1Freq>
 8002018:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	4a7b      	ldr	r2, [pc, #492]	; (800220c <HAL_I2C_Init+0x25c>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d807      	bhi.n	8002034 <HAL_I2C_Init+0x84>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4a7a      	ldr	r2, [pc, #488]	; (8002210 <HAL_I2C_Init+0x260>)
 8002028:	4293      	cmp	r3, r2
 800202a:	bf94      	ite	ls
 800202c:	2301      	movls	r3, #1
 800202e:	2300      	movhi	r3, #0
 8002030:	b2db      	uxtb	r3, r3
 8002032:	e006      	b.n	8002042 <HAL_I2C_Init+0x92>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4a77      	ldr	r2, [pc, #476]	; (8002214 <HAL_I2C_Init+0x264>)
 8002038:	4293      	cmp	r3, r2
 800203a:	bf94      	ite	ls
 800203c:	2301      	movls	r3, #1
 800203e:	2300      	movhi	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e0db      	b.n	8002202 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4a72      	ldr	r2, [pc, #456]	; (8002218 <HAL_I2C_Init+0x268>)
 800204e:	fba2 2303 	umull	r2, r3, r2, r3
 8002052:	0c9b      	lsrs	r3, r3, #18
 8002054:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68ba      	ldr	r2, [r7, #8]
 8002066:	430a      	orrs	r2, r1
 8002068:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	4a64      	ldr	r2, [pc, #400]	; (800220c <HAL_I2C_Init+0x25c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d802      	bhi.n	8002084 <HAL_I2C_Init+0xd4>
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	3301      	adds	r3, #1
 8002082:	e009      	b.n	8002098 <HAL_I2C_Init+0xe8>
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800208a:	fb02 f303 	mul.w	r3, r2, r3
 800208e:	4a63      	ldr	r2, [pc, #396]	; (800221c <HAL_I2C_Init+0x26c>)
 8002090:	fba2 2303 	umull	r2, r3, r2, r3
 8002094:	099b      	lsrs	r3, r3, #6
 8002096:	3301      	adds	r3, #1
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	430b      	orrs	r3, r1
 800209e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	4956      	ldr	r1, [pc, #344]	; (800220c <HAL_I2C_Init+0x25c>)
 80020b4:	428b      	cmp	r3, r1
 80020b6:	d80d      	bhi.n	80020d4 <HAL_I2C_Init+0x124>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	1e59      	subs	r1, r3, #1
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80020c6:	3301      	adds	r3, #1
 80020c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	bf38      	it	cc
 80020d0:	2304      	movcc	r3, #4
 80020d2:	e04f      	b.n	8002174 <HAL_I2C_Init+0x1c4>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d111      	bne.n	8002100 <HAL_I2C_Init+0x150>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	1e58      	subs	r0, r3, #1
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6859      	ldr	r1, [r3, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	440b      	add	r3, r1
 80020ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ee:	3301      	adds	r3, #1
 80020f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	bf0c      	ite	eq
 80020f8:	2301      	moveq	r3, #1
 80020fa:	2300      	movne	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	e012      	b.n	8002126 <HAL_I2C_Init+0x176>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	1e58      	subs	r0, r3, #1
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6859      	ldr	r1, [r3, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	0099      	lsls	r1, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	fbb0 f3f3 	udiv	r3, r0, r3
 8002116:	3301      	adds	r3, #1
 8002118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800211c:	2b00      	cmp	r3, #0
 800211e:	bf0c      	ite	eq
 8002120:	2301      	moveq	r3, #1
 8002122:	2300      	movne	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <HAL_I2C_Init+0x17e>
 800212a:	2301      	movs	r3, #1
 800212c:	e022      	b.n	8002174 <HAL_I2C_Init+0x1c4>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10e      	bne.n	8002154 <HAL_I2C_Init+0x1a4>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	1e58      	subs	r0, r3, #1
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6859      	ldr	r1, [r3, #4]
 800213e:	460b      	mov	r3, r1
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	440b      	add	r3, r1
 8002144:	fbb0 f3f3 	udiv	r3, r0, r3
 8002148:	3301      	adds	r3, #1
 800214a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800214e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002152:	e00f      	b.n	8002174 <HAL_I2C_Init+0x1c4>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	1e58      	subs	r0, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6859      	ldr	r1, [r3, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	0099      	lsls	r1, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	fbb0 f3f3 	udiv	r3, r0, r3
 800216a:	3301      	adds	r3, #1
 800216c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002170:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	6809      	ldr	r1, [r1, #0]
 8002178:	4313      	orrs	r3, r2
 800217a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69da      	ldr	r2, [r3, #28]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6911      	ldr	r1, [r2, #16]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	68d2      	ldr	r2, [r2, #12]
 80021ae:	4311      	orrs	r1, r2
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	430b      	orrs	r3, r1
 80021b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695a      	ldr	r2, [r3, #20]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 0201 	orr.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2220      	movs	r2, #32
 80021ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	000186a0 	.word	0x000186a0
 8002210:	001e847f 	.word	0x001e847f
 8002214:	003d08ff 	.word	0x003d08ff
 8002218:	431bde83 	.word	0x431bde83
 800221c:	10624dd3 	.word	0x10624dd3

08002220 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e26c      	b.n	800270c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 8087 	beq.w	800234e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002240:	4b92      	ldr	r3, [pc, #584]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 030c 	and.w	r3, r3, #12
 8002248:	2b04      	cmp	r3, #4
 800224a:	d00c      	beq.n	8002266 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800224c:	4b8f      	ldr	r3, [pc, #572]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 030c 	and.w	r3, r3, #12
 8002254:	2b08      	cmp	r3, #8
 8002256:	d112      	bne.n	800227e <HAL_RCC_OscConfig+0x5e>
 8002258:	4b8c      	ldr	r3, [pc, #560]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002264:	d10b      	bne.n	800227e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002266:	4b89      	ldr	r3, [pc, #548]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d06c      	beq.n	800234c <HAL_RCC_OscConfig+0x12c>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d168      	bne.n	800234c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e246      	b.n	800270c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002286:	d106      	bne.n	8002296 <HAL_RCC_OscConfig+0x76>
 8002288:	4b80      	ldr	r3, [pc, #512]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a7f      	ldr	r2, [pc, #508]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 800228e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	e02e      	b.n	80022f4 <HAL_RCC_OscConfig+0xd4>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x98>
 800229e:	4b7b      	ldr	r3, [pc, #492]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a7a      	ldr	r2, [pc, #488]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	4b78      	ldr	r3, [pc, #480]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a77      	ldr	r2, [pc, #476]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	e01d      	b.n	80022f4 <HAL_RCC_OscConfig+0xd4>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022c0:	d10c      	bne.n	80022dc <HAL_RCC_OscConfig+0xbc>
 80022c2:	4b72      	ldr	r3, [pc, #456]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a71      	ldr	r2, [pc, #452]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	4b6f      	ldr	r3, [pc, #444]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a6e      	ldr	r2, [pc, #440]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	e00b      	b.n	80022f4 <HAL_RCC_OscConfig+0xd4>
 80022dc:	4b6b      	ldr	r3, [pc, #428]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a6a      	ldr	r2, [pc, #424]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	4b68      	ldr	r3, [pc, #416]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a67      	ldr	r2, [pc, #412]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80022ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d013      	beq.n	8002324 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fc:	f7fe fe0c 	bl	8000f18 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002304:	f7fe fe08 	bl	8000f18 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	; 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e1fa      	b.n	800270c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002316:	4b5d      	ldr	r3, [pc, #372]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0xe4>
 8002322:	e014      	b.n	800234e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002324:	f7fe fdf8 	bl	8000f18 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800232c:	f7fe fdf4 	bl	8000f18 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b64      	cmp	r3, #100	; 0x64
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e1e6      	b.n	800270c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233e:	4b53      	ldr	r3, [pc, #332]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x10c>
 800234a:	e000      	b.n	800234e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d063      	beq.n	8002422 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800235a:	4b4c      	ldr	r3, [pc, #304]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00b      	beq.n	800237e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002366:	4b49      	ldr	r3, [pc, #292]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	2b08      	cmp	r3, #8
 8002370:	d11c      	bne.n	80023ac <HAL_RCC_OscConfig+0x18c>
 8002372:	4b46      	ldr	r3, [pc, #280]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d116      	bne.n	80023ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800237e:	4b43      	ldr	r3, [pc, #268]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d005      	beq.n	8002396 <HAL_RCC_OscConfig+0x176>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d001      	beq.n	8002396 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e1ba      	b.n	800270c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002396:	4b3d      	ldr	r3, [pc, #244]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4939      	ldr	r1, [pc, #228]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023aa:	e03a      	b.n	8002422 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d020      	beq.n	80023f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023b4:	4b36      	ldr	r3, [pc, #216]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ba:	f7fe fdad 	bl	8000f18 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023c2:	f7fe fda9 	bl	8000f18 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e19b      	b.n	800270c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d4:	4b2d      	ldr	r3, [pc, #180]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0f0      	beq.n	80023c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e0:	4b2a      	ldr	r3, [pc, #168]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4927      	ldr	r1, [pc, #156]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	600b      	str	r3, [r1, #0]
 80023f4:	e015      	b.n	8002422 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023f6:	4b26      	ldr	r3, [pc, #152]	; (8002490 <HAL_RCC_OscConfig+0x270>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fc:	f7fe fd8c 	bl	8000f18 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002404:	f7fe fd88 	bl	8000f18 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e17a      	b.n	800270c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002416:	4b1d      	ldr	r3, [pc, #116]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d03a      	beq.n	80024a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d019      	beq.n	800246a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002436:	4b17      	ldr	r3, [pc, #92]	; (8002494 <HAL_RCC_OscConfig+0x274>)
 8002438:	2201      	movs	r2, #1
 800243a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800243c:	f7fe fd6c 	bl	8000f18 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002444:	f7fe fd68 	bl	8000f18 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e15a      	b.n	800270c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002456:	4b0d      	ldr	r3, [pc, #52]	; (800248c <HAL_RCC_OscConfig+0x26c>)
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002462:	2001      	movs	r0, #1
 8002464:	f000 fada 	bl	8002a1c <RCC_Delay>
 8002468:	e01c      	b.n	80024a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800246a:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <HAL_RCC_OscConfig+0x274>)
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002470:	f7fe fd52 	bl	8000f18 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002476:	e00f      	b.n	8002498 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002478:	f7fe fd4e 	bl	8000f18 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d908      	bls.n	8002498 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e140      	b.n	800270c <HAL_RCC_OscConfig+0x4ec>
 800248a:	bf00      	nop
 800248c:	40021000 	.word	0x40021000
 8002490:	42420000 	.word	0x42420000
 8002494:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002498:	4b9e      	ldr	r3, [pc, #632]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1e9      	bne.n	8002478 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 80a6 	beq.w	80025fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024b2:	2300      	movs	r3, #0
 80024b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024b6:	4b97      	ldr	r3, [pc, #604]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10d      	bne.n	80024de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c2:	4b94      	ldr	r3, [pc, #592]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	4a93      	ldr	r2, [pc, #588]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 80024c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024cc:	61d3      	str	r3, [r2, #28]
 80024ce:	4b91      	ldr	r3, [pc, #580]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d6:	60bb      	str	r3, [r7, #8]
 80024d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024da:	2301      	movs	r3, #1
 80024dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024de:	4b8e      	ldr	r3, [pc, #568]	; (8002718 <HAL_RCC_OscConfig+0x4f8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d118      	bne.n	800251c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ea:	4b8b      	ldr	r3, [pc, #556]	; (8002718 <HAL_RCC_OscConfig+0x4f8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a8a      	ldr	r2, [pc, #552]	; (8002718 <HAL_RCC_OscConfig+0x4f8>)
 80024f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f6:	f7fe fd0f 	bl	8000f18 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024fe:	f7fe fd0b 	bl	8000f18 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b64      	cmp	r3, #100	; 0x64
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e0fd      	b.n	800270c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002510:	4b81      	ldr	r3, [pc, #516]	; (8002718 <HAL_RCC_OscConfig+0x4f8>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0f0      	beq.n	80024fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d106      	bne.n	8002532 <HAL_RCC_OscConfig+0x312>
 8002524:	4b7b      	ldr	r3, [pc, #492]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	4a7a      	ldr	r2, [pc, #488]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	6213      	str	r3, [r2, #32]
 8002530:	e02d      	b.n	800258e <HAL_RCC_OscConfig+0x36e>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10c      	bne.n	8002554 <HAL_RCC_OscConfig+0x334>
 800253a:	4b76      	ldr	r3, [pc, #472]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	4a75      	ldr	r2, [pc, #468]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 8002540:	f023 0301 	bic.w	r3, r3, #1
 8002544:	6213      	str	r3, [r2, #32]
 8002546:	4b73      	ldr	r3, [pc, #460]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	4a72      	ldr	r2, [pc, #456]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 800254c:	f023 0304 	bic.w	r3, r3, #4
 8002550:	6213      	str	r3, [r2, #32]
 8002552:	e01c      	b.n	800258e <HAL_RCC_OscConfig+0x36e>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	2b05      	cmp	r3, #5
 800255a:	d10c      	bne.n	8002576 <HAL_RCC_OscConfig+0x356>
 800255c:	4b6d      	ldr	r3, [pc, #436]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	4a6c      	ldr	r2, [pc, #432]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 8002562:	f043 0304 	orr.w	r3, r3, #4
 8002566:	6213      	str	r3, [r2, #32]
 8002568:	4b6a      	ldr	r3, [pc, #424]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	4a69      	ldr	r2, [pc, #420]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	6213      	str	r3, [r2, #32]
 8002574:	e00b      	b.n	800258e <HAL_RCC_OscConfig+0x36e>
 8002576:	4b67      	ldr	r3, [pc, #412]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	4a66      	ldr	r2, [pc, #408]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 800257c:	f023 0301 	bic.w	r3, r3, #1
 8002580:	6213      	str	r3, [r2, #32]
 8002582:	4b64      	ldr	r3, [pc, #400]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	4a63      	ldr	r2, [pc, #396]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 8002588:	f023 0304 	bic.w	r3, r3, #4
 800258c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d015      	beq.n	80025c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002596:	f7fe fcbf 	bl	8000f18 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800259c:	e00a      	b.n	80025b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800259e:	f7fe fcbb 	bl	8000f18 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e0ab      	b.n	800270c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b4:	4b57      	ldr	r3, [pc, #348]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0ee      	beq.n	800259e <HAL_RCC_OscConfig+0x37e>
 80025c0:	e014      	b.n	80025ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c2:	f7fe fca9 	bl	8000f18 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c8:	e00a      	b.n	80025e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ca:	f7fe fca5 	bl	8000f18 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d8:	4293      	cmp	r3, r2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e095      	b.n	800270c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e0:	4b4c      	ldr	r3, [pc, #304]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1ee      	bne.n	80025ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025ec:	7dfb      	ldrb	r3, [r7, #23]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d105      	bne.n	80025fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f2:	4b48      	ldr	r3, [pc, #288]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	4a47      	ldr	r2, [pc, #284]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 80025f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 8081 	beq.w	800270a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002608:	4b42      	ldr	r3, [pc, #264]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 030c 	and.w	r3, r3, #12
 8002610:	2b08      	cmp	r3, #8
 8002612:	d061      	beq.n	80026d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	2b02      	cmp	r3, #2
 800261a:	d146      	bne.n	80026aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261c:	4b3f      	ldr	r3, [pc, #252]	; (800271c <HAL_RCC_OscConfig+0x4fc>)
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002622:	f7fe fc79 	bl	8000f18 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262a:	f7fe fc75 	bl	8000f18 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e067      	b.n	800270c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800263c:	4b35      	ldr	r3, [pc, #212]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1f0      	bne.n	800262a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002650:	d108      	bne.n	8002664 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002652:	4b30      	ldr	r3, [pc, #192]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	492d      	ldr	r1, [pc, #180]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 8002660:	4313      	orrs	r3, r2
 8002662:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002664:	4b2b      	ldr	r3, [pc, #172]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a19      	ldr	r1, [r3, #32]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	430b      	orrs	r3, r1
 8002676:	4927      	ldr	r1, [pc, #156]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 8002678:	4313      	orrs	r3, r2
 800267a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800267c:	4b27      	ldr	r3, [pc, #156]	; (800271c <HAL_RCC_OscConfig+0x4fc>)
 800267e:	2201      	movs	r2, #1
 8002680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002682:	f7fe fc49 	bl	8000f18 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268a:	f7fe fc45 	bl	8000f18 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e037      	b.n	800270c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800269c:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0f0      	beq.n	800268a <HAL_RCC_OscConfig+0x46a>
 80026a8:	e02f      	b.n	800270a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026aa:	4b1c      	ldr	r3, [pc, #112]	; (800271c <HAL_RCC_OscConfig+0x4fc>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7fe fc32 	bl	8000f18 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b8:	f7fe fc2e 	bl	8000f18 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e020      	b.n	800270c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ca:	4b12      	ldr	r3, [pc, #72]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x498>
 80026d6:	e018      	b.n	800270a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e013      	b.n	800270c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026e4:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <HAL_RCC_OscConfig+0x4f4>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d106      	bne.n	8002706 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002702:	429a      	cmp	r2, r3
 8002704:	d001      	beq.n	800270a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40021000 	.word	0x40021000
 8002718:	40007000 	.word	0x40007000
 800271c:	42420060 	.word	0x42420060

08002720 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e0d0      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002734:	4b6a      	ldr	r3, [pc, #424]	; (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d910      	bls.n	8002764 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002742:	4b67      	ldr	r3, [pc, #412]	; (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 0207 	bic.w	r2, r3, #7
 800274a:	4965      	ldr	r1, [pc, #404]	; (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	4313      	orrs	r3, r2
 8002750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002752:	4b63      	ldr	r3, [pc, #396]	; (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d001      	beq.n	8002764 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e0b8      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d020      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800277c:	4b59      	ldr	r3, [pc, #356]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	4a58      	ldr	r2, [pc, #352]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002786:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	2b00      	cmp	r3, #0
 8002792:	d005      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002794:	4b53      	ldr	r3, [pc, #332]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	4a52      	ldr	r2, [pc, #328]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 800279a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800279e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a0:	4b50      	ldr	r3, [pc, #320]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	494d      	ldr	r1, [pc, #308]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d040      	beq.n	8002840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d107      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c6:	4b47      	ldr	r3, [pc, #284]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d115      	bne.n	80027fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e07f      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d107      	bne.n	80027ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027de:	4b41      	ldr	r3, [pc, #260]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d109      	bne.n	80027fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e073      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ee:	4b3d      	ldr	r3, [pc, #244]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e06b      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027fe:	4b39      	ldr	r3, [pc, #228]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f023 0203 	bic.w	r2, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	4936      	ldr	r1, [pc, #216]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	4313      	orrs	r3, r2
 800280e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002810:	f7fe fb82 	bl	8000f18 <HAL_GetTick>
 8002814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002816:	e00a      	b.n	800282e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002818:	f7fe fb7e 	bl	8000f18 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	f241 3288 	movw	r2, #5000	; 0x1388
 8002826:	4293      	cmp	r3, r2
 8002828:	d901      	bls.n	800282e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e053      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282e:	4b2d      	ldr	r3, [pc, #180]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f003 020c 	and.w	r2, r3, #12
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	429a      	cmp	r2, r3
 800283e:	d1eb      	bne.n	8002818 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002840:	4b27      	ldr	r3, [pc, #156]	; (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	429a      	cmp	r2, r3
 800284c:	d210      	bcs.n	8002870 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284e:	4b24      	ldr	r3, [pc, #144]	; (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f023 0207 	bic.w	r2, r3, #7
 8002856:	4922      	ldr	r1, [pc, #136]	; (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	4313      	orrs	r3, r2
 800285c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800285e:	4b20      	ldr	r3, [pc, #128]	; (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	429a      	cmp	r2, r3
 800286a:	d001      	beq.n	8002870 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e032      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d008      	beq.n	800288e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800287c:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	4916      	ldr	r1, [pc, #88]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	4313      	orrs	r3, r2
 800288c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d009      	beq.n	80028ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800289a:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	490e      	ldr	r1, [pc, #56]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028ae:	f000 f821 	bl	80028f4 <HAL_RCC_GetSysClockFreq>
 80028b2:	4601      	mov	r1, r0
 80028b4:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	091b      	lsrs	r3, r3, #4
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <HAL_RCC_ClockConfig+0x1c8>)
 80028c0:	5cd3      	ldrb	r3, [r2, r3]
 80028c2:	fa21 f303 	lsr.w	r3, r1, r3
 80028c6:	4a09      	ldr	r2, [pc, #36]	; (80028ec <HAL_RCC_ClockConfig+0x1cc>)
 80028c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028ca:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <HAL_RCC_ClockConfig+0x1d0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fe fae0 	bl	8000e94 <HAL_InitTick>

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40022000 	.word	0x40022000
 80028e4:	40021000 	.word	0x40021000
 80028e8:	0800381c 	.word	0x0800381c
 80028ec:	20000014 	.word	0x20000014
 80028f0:	20000018 	.word	0x20000018

080028f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028f4:	b490      	push	{r4, r7}
 80028f6:	b08a      	sub	sp, #40	; 0x28
 80028f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028fa:	4b2a      	ldr	r3, [pc, #168]	; (80029a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028fc:	1d3c      	adds	r4, r7, #4
 80028fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002900:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002904:	4b28      	ldr	r3, [pc, #160]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]
 800290e:	2300      	movs	r3, #0
 8002910:	61bb      	str	r3, [r7, #24]
 8002912:	2300      	movs	r3, #0
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800291a:	2300      	movs	r3, #0
 800291c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800291e:	4b23      	ldr	r3, [pc, #140]	; (80029ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f003 030c 	and.w	r3, r3, #12
 800292a:	2b04      	cmp	r3, #4
 800292c:	d002      	beq.n	8002934 <HAL_RCC_GetSysClockFreq+0x40>
 800292e:	2b08      	cmp	r3, #8
 8002930:	d003      	beq.n	800293a <HAL_RCC_GetSysClockFreq+0x46>
 8002932:	e02d      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002934:	4b1e      	ldr	r3, [pc, #120]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002936:	623b      	str	r3, [r7, #32]
      break;
 8002938:	e02d      	b.n	8002996 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	0c9b      	lsrs	r3, r3, #18
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002946:	4413      	add	r3, r2
 8002948:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800294c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d013      	beq.n	8002980 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002958:	4b14      	ldr	r3, [pc, #80]	; (80029ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	0c5b      	lsrs	r3, r3, #17
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002966:	4413      	add	r3, r2
 8002968:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800296c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	4a0f      	ldr	r2, [pc, #60]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002972:	fb02 f203 	mul.w	r2, r2, r3
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	fbb2 f3f3 	udiv	r3, r2, r3
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
 800297e:	e004      	b.n	800298a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	4a0c      	ldr	r2, [pc, #48]	; (80029b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002984:	fb02 f303 	mul.w	r3, r2, r3
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	623b      	str	r3, [r7, #32]
      break;
 800298e:	e002      	b.n	8002996 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002990:	4b07      	ldr	r3, [pc, #28]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002992:	623b      	str	r3, [r7, #32]
      break;
 8002994:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002996:	6a3b      	ldr	r3, [r7, #32]
}
 8002998:	4618      	mov	r0, r3
 800299a:	3728      	adds	r7, #40	; 0x28
 800299c:	46bd      	mov	sp, r7
 800299e:	bc90      	pop	{r4, r7}
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	08003808 	.word	0x08003808
 80029a8:	08003818 	.word	0x08003818
 80029ac:	40021000 	.word	0x40021000
 80029b0:	007a1200 	.word	0x007a1200
 80029b4:	003d0900 	.word	0x003d0900

080029b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029bc:	4b02      	ldr	r3, [pc, #8]	; (80029c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80029be:	681b      	ldr	r3, [r3, #0]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr
 80029c8:	20000014 	.word	0x20000014

080029cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029d0:	f7ff fff2 	bl	80029b8 <HAL_RCC_GetHCLKFreq>
 80029d4:	4601      	mov	r1, r0
 80029d6:	4b05      	ldr	r3, [pc, #20]	; (80029ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	0a1b      	lsrs	r3, r3, #8
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	4a03      	ldr	r2, [pc, #12]	; (80029f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029e2:	5cd3      	ldrb	r3, [r2, r3]
 80029e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40021000 	.word	0x40021000
 80029f0:	0800382c 	.word	0x0800382c

080029f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029f8:	f7ff ffde 	bl	80029b8 <HAL_RCC_GetHCLKFreq>
 80029fc:	4601      	mov	r1, r0
 80029fe:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	0adb      	lsrs	r3, r3, #11
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	4a03      	ldr	r2, [pc, #12]	; (8002a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a0a:	5cd3      	ldrb	r3, [r2, r3]
 8002a0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40021000 	.word	0x40021000
 8002a18:	0800382c 	.word	0x0800382c

08002a1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a24:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <RCC_Delay+0x34>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a0a      	ldr	r2, [pc, #40]	; (8002a54 <RCC_Delay+0x38>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	0a5b      	lsrs	r3, r3, #9
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	fb02 f303 	mul.w	r3, r2, r3
 8002a36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a38:	bf00      	nop
  }
  while (Delay --);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	1e5a      	subs	r2, r3, #1
 8002a3e:	60fa      	str	r2, [r7, #12]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1f9      	bne.n	8002a38 <RCC_Delay+0x1c>
}
 8002a44:	bf00      	nop
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	20000014 	.word	0x20000014
 8002a54:	10624dd3 	.word	0x10624dd3

08002a58 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	613b      	str	r3, [r7, #16]
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d07d      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002a74:	2300      	movs	r3, #0
 8002a76:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a78:	4b4f      	ldr	r3, [pc, #316]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10d      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a84:	4b4c      	ldr	r3, [pc, #304]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	4a4b      	ldr	r2, [pc, #300]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	61d3      	str	r3, [r2, #28]
 8002a90:	4b49      	ldr	r3, [pc, #292]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a98:	60bb      	str	r3, [r7, #8]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa0:	4b46      	ldr	r3, [pc, #280]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d118      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aac:	4b43      	ldr	r3, [pc, #268]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a42      	ldr	r2, [pc, #264]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab8:	f7fe fa2e 	bl	8000f18 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abe:	e008      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac0:	f7fe fa2a 	bl	8000f18 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b64      	cmp	r3, #100	; 0x64
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e06d      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad2:	4b3a      	ldr	r3, [pc, #232]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0f0      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ade:	4b36      	ldr	r3, [pc, #216]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ae6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d02e      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d027      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002afc:	4b2e      	ldr	r3, [pc, #184]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b04:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b06:	4b2e      	ldr	r3, [pc, #184]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b0c:	4b2c      	ldr	r3, [pc, #176]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b12:	4a29      	ldr	r2, [pc, #164]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d014      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b22:	f7fe f9f9 	bl	8000f18 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b28:	e00a      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2a:	f7fe f9f5 	bl	8000f18 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e036      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b40:	4b1d      	ldr	r3, [pc, #116]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0ee      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b4c:	4b1a      	ldr	r3, [pc, #104]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	4917      	ldr	r1, [pc, #92]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b5e:	7dfb      	ldrb	r3, [r7, #23]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d105      	bne.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b64:	4b14      	ldr	r3, [pc, #80]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	4a13      	ldr	r2, [pc, #76]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d008      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b7c:	4b0e      	ldr	r3, [pc, #56]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	490b      	ldr	r1, [pc, #44]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0310 	and.w	r3, r3, #16
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d008      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b9a:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	4904      	ldr	r1, [pc, #16]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	40007000 	.word	0x40007000
 8002bc0:	42420440 	.word	0x42420440

08002bc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e03f      	b.n	8002c56 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d106      	bne.n	8002bf0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7fe f85c 	bl	8000ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2224      	movs	r2, #36	; 0x24
 8002bf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f905 	bl	8002e18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	691a      	ldr	r2, [r3, #16]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	695a      	ldr	r2, [r3, #20]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2220      	movs	r2, #32
 8002c48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b08a      	sub	sp, #40	; 0x28
 8002c62:	af02      	add	r7, sp, #8
 8002c64:	60f8      	str	r0, [r7, #12]
 8002c66:	60b9      	str	r1, [r7, #8]
 8002c68:	603b      	str	r3, [r7, #0]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b20      	cmp	r3, #32
 8002c7c:	d17c      	bne.n	8002d78 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d002      	beq.n	8002c8a <HAL_UART_Transmit+0x2c>
 8002c84:	88fb      	ldrh	r3, [r7, #6]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e075      	b.n	8002d7a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <HAL_UART_Transmit+0x3e>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	e06e      	b.n	8002d7a <HAL_UART_Transmit+0x11c>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2221      	movs	r2, #33	; 0x21
 8002cae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002cb2:	f7fe f931 	bl	8000f18 <HAL_GetTick>
 8002cb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	88fa      	ldrh	r2, [r7, #6]
 8002cbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	88fa      	ldrh	r2, [r7, #6]
 8002cc2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ccc:	d108      	bne.n	8002ce0 <HAL_UART_Transmit+0x82>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d104      	bne.n	8002ce0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	61bb      	str	r3, [r7, #24]
 8002cde:	e003      	b.n	8002ce8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002cf0:	e02a      	b.n	8002d48 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2180      	movs	r1, #128	; 0x80
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 f840 	bl	8002d82 <UART_WaitOnFlagUntilTimeout>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e036      	b.n	8002d7a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10b      	bne.n	8002d2a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	461a      	mov	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	3302      	adds	r3, #2
 8002d26:	61bb      	str	r3, [r7, #24]
 8002d28:	e007      	b.n	8002d3a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	781a      	ldrb	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	3301      	adds	r3, #1
 8002d38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	3b01      	subs	r3, #1
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1cf      	bne.n	8002cf2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	2140      	movs	r1, #64	; 0x40
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 f810 	bl	8002d82 <UART_WaitOnFlagUntilTimeout>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e006      	b.n	8002d7a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002d74:	2300      	movs	r3, #0
 8002d76:	e000      	b.n	8002d7a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d78:	2302      	movs	r3, #2
  }
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3720      	adds	r7, #32
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	60f8      	str	r0, [r7, #12]
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	603b      	str	r3, [r7, #0]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d92:	e02c      	b.n	8002dee <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9a:	d028      	beq.n	8002dee <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d007      	beq.n	8002db2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002da2:	f7fe f8b9 	bl	8000f18 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d21d      	bcs.n	8002dee <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002dc0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	695a      	ldr	r2, [r3, #20]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 0201 	bic.w	r2, r2, #1
 8002dd0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e00f      	b.n	8002e0e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	4013      	ands	r3, r2
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	bf0c      	ite	eq
 8002dfe:	2301      	moveq	r3, #1
 8002e00:	2300      	movne	r3, #0
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	461a      	mov	r2, r3
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d0c3      	beq.n	8002d94 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e52:	f023 030c 	bic.w	r3, r3, #12
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6812      	ldr	r2, [r2, #0]
 8002e5a:	68b9      	ldr	r1, [r7, #8]
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	699a      	ldr	r2, [r3, #24]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a2c      	ldr	r2, [pc, #176]	; (8002f2c <UART_SetConfig+0x114>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d103      	bne.n	8002e88 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e80:	f7ff fdb8 	bl	80029f4 <HAL_RCC_GetPCLK2Freq>
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	e002      	b.n	8002e8e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e88:	f7ff fda0 	bl	80029cc <HAL_RCC_GetPCLK1Freq>
 8002e8c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4613      	mov	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	009a      	lsls	r2, r3, #2
 8002e98:	441a      	add	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea4:	4a22      	ldr	r2, [pc, #136]	; (8002f30 <UART_SetConfig+0x118>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	0119      	lsls	r1, r3, #4
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	009a      	lsls	r2, r3, #2
 8002eb8:	441a      	add	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ec4:	4b1a      	ldr	r3, [pc, #104]	; (8002f30 <UART_SetConfig+0x118>)
 8002ec6:	fba3 0302 	umull	r0, r3, r3, r2
 8002eca:	095b      	lsrs	r3, r3, #5
 8002ecc:	2064      	movs	r0, #100	; 0x64
 8002ece:	fb00 f303 	mul.w	r3, r0, r3
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	3332      	adds	r3, #50	; 0x32
 8002ed8:	4a15      	ldr	r2, [pc, #84]	; (8002f30 <UART_SetConfig+0x118>)
 8002eda:	fba2 2303 	umull	r2, r3, r2, r3
 8002ede:	095b      	lsrs	r3, r3, #5
 8002ee0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ee4:	4419      	add	r1, r3
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	009a      	lsls	r2, r3, #2
 8002ef0:	441a      	add	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002efc:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <UART_SetConfig+0x118>)
 8002efe:	fba3 0302 	umull	r0, r3, r3, r2
 8002f02:	095b      	lsrs	r3, r3, #5
 8002f04:	2064      	movs	r0, #100	; 0x64
 8002f06:	fb00 f303 	mul.w	r3, r0, r3
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	3332      	adds	r3, #50	; 0x32
 8002f10:	4a07      	ldr	r2, [pc, #28]	; (8002f30 <UART_SetConfig+0x118>)
 8002f12:	fba2 2303 	umull	r2, r3, r2, r3
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	f003 020f 	and.w	r2, r3, #15
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	440a      	add	r2, r1
 8002f22:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f24:	bf00      	nop
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40013800 	.word	0x40013800
 8002f30:	51eb851f 	.word	0x51eb851f

08002f34 <__errno>:
 8002f34:	4b01      	ldr	r3, [pc, #4]	; (8002f3c <__errno+0x8>)
 8002f36:	6818      	ldr	r0, [r3, #0]
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	20000020 	.word	0x20000020

08002f40 <__libc_init_array>:
 8002f40:	b570      	push	{r4, r5, r6, lr}
 8002f42:	2500      	movs	r5, #0
 8002f44:	4e0c      	ldr	r6, [pc, #48]	; (8002f78 <__libc_init_array+0x38>)
 8002f46:	4c0d      	ldr	r4, [pc, #52]	; (8002f7c <__libc_init_array+0x3c>)
 8002f48:	1ba4      	subs	r4, r4, r6
 8002f4a:	10a4      	asrs	r4, r4, #2
 8002f4c:	42a5      	cmp	r5, r4
 8002f4e:	d109      	bne.n	8002f64 <__libc_init_array+0x24>
 8002f50:	f000 fc34 	bl	80037bc <_init>
 8002f54:	2500      	movs	r5, #0
 8002f56:	4e0a      	ldr	r6, [pc, #40]	; (8002f80 <__libc_init_array+0x40>)
 8002f58:	4c0a      	ldr	r4, [pc, #40]	; (8002f84 <__libc_init_array+0x44>)
 8002f5a:	1ba4      	subs	r4, r4, r6
 8002f5c:	10a4      	asrs	r4, r4, #2
 8002f5e:	42a5      	cmp	r5, r4
 8002f60:	d105      	bne.n	8002f6e <__libc_init_array+0x2e>
 8002f62:	bd70      	pop	{r4, r5, r6, pc}
 8002f64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f68:	4798      	blx	r3
 8002f6a:	3501      	adds	r5, #1
 8002f6c:	e7ee      	b.n	8002f4c <__libc_init_array+0xc>
 8002f6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f72:	4798      	blx	r3
 8002f74:	3501      	adds	r5, #1
 8002f76:	e7f2      	b.n	8002f5e <__libc_init_array+0x1e>
 8002f78:	08003868 	.word	0x08003868
 8002f7c:	08003868 	.word	0x08003868
 8002f80:	08003868 	.word	0x08003868
 8002f84:	0800386c 	.word	0x0800386c

08002f88 <memset>:
 8002f88:	4603      	mov	r3, r0
 8002f8a:	4402      	add	r2, r0
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d100      	bne.n	8002f92 <memset+0xa>
 8002f90:	4770      	bx	lr
 8002f92:	f803 1b01 	strb.w	r1, [r3], #1
 8002f96:	e7f9      	b.n	8002f8c <memset+0x4>

08002f98 <siprintf>:
 8002f98:	b40e      	push	{r1, r2, r3}
 8002f9a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f9e:	b500      	push	{lr}
 8002fa0:	b09c      	sub	sp, #112	; 0x70
 8002fa2:	ab1d      	add	r3, sp, #116	; 0x74
 8002fa4:	9002      	str	r0, [sp, #8]
 8002fa6:	9006      	str	r0, [sp, #24]
 8002fa8:	9107      	str	r1, [sp, #28]
 8002faa:	9104      	str	r1, [sp, #16]
 8002fac:	4808      	ldr	r0, [pc, #32]	; (8002fd0 <siprintf+0x38>)
 8002fae:	4909      	ldr	r1, [pc, #36]	; (8002fd4 <siprintf+0x3c>)
 8002fb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8002fb4:	9105      	str	r1, [sp, #20]
 8002fb6:	6800      	ldr	r0, [r0, #0]
 8002fb8:	a902      	add	r1, sp, #8
 8002fba:	9301      	str	r3, [sp, #4]
 8002fbc:	f000 f866 	bl	800308c <_svfiprintf_r>
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	9b02      	ldr	r3, [sp, #8]
 8002fc4:	701a      	strb	r2, [r3, #0]
 8002fc6:	b01c      	add	sp, #112	; 0x70
 8002fc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002fcc:	b003      	add	sp, #12
 8002fce:	4770      	bx	lr
 8002fd0:	20000020 	.word	0x20000020
 8002fd4:	ffff0208 	.word	0xffff0208

08002fd8 <__ssputs_r>:
 8002fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fdc:	688e      	ldr	r6, [r1, #8]
 8002fde:	4682      	mov	sl, r0
 8002fe0:	429e      	cmp	r6, r3
 8002fe2:	460c      	mov	r4, r1
 8002fe4:	4690      	mov	r8, r2
 8002fe6:	4699      	mov	r9, r3
 8002fe8:	d837      	bhi.n	800305a <__ssputs_r+0x82>
 8002fea:	898a      	ldrh	r2, [r1, #12]
 8002fec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002ff0:	d031      	beq.n	8003056 <__ssputs_r+0x7e>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	6825      	ldr	r5, [r4, #0]
 8002ff6:	6909      	ldr	r1, [r1, #16]
 8002ff8:	1a6f      	subs	r7, r5, r1
 8002ffa:	6965      	ldr	r5, [r4, #20]
 8002ffc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003000:	fb95 f5f3 	sdiv	r5, r5, r3
 8003004:	f109 0301 	add.w	r3, r9, #1
 8003008:	443b      	add	r3, r7
 800300a:	429d      	cmp	r5, r3
 800300c:	bf38      	it	cc
 800300e:	461d      	movcc	r5, r3
 8003010:	0553      	lsls	r3, r2, #21
 8003012:	d530      	bpl.n	8003076 <__ssputs_r+0x9e>
 8003014:	4629      	mov	r1, r5
 8003016:	f000 fb37 	bl	8003688 <_malloc_r>
 800301a:	4606      	mov	r6, r0
 800301c:	b950      	cbnz	r0, 8003034 <__ssputs_r+0x5c>
 800301e:	230c      	movs	r3, #12
 8003020:	f04f 30ff 	mov.w	r0, #4294967295
 8003024:	f8ca 3000 	str.w	r3, [sl]
 8003028:	89a3      	ldrh	r3, [r4, #12]
 800302a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800302e:	81a3      	strh	r3, [r4, #12]
 8003030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003034:	463a      	mov	r2, r7
 8003036:	6921      	ldr	r1, [r4, #16]
 8003038:	f000 fab6 	bl	80035a8 <memcpy>
 800303c:	89a3      	ldrh	r3, [r4, #12]
 800303e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003046:	81a3      	strh	r3, [r4, #12]
 8003048:	6126      	str	r6, [r4, #16]
 800304a:	443e      	add	r6, r7
 800304c:	6026      	str	r6, [r4, #0]
 800304e:	464e      	mov	r6, r9
 8003050:	6165      	str	r5, [r4, #20]
 8003052:	1bed      	subs	r5, r5, r7
 8003054:	60a5      	str	r5, [r4, #8]
 8003056:	454e      	cmp	r6, r9
 8003058:	d900      	bls.n	800305c <__ssputs_r+0x84>
 800305a:	464e      	mov	r6, r9
 800305c:	4632      	mov	r2, r6
 800305e:	4641      	mov	r1, r8
 8003060:	6820      	ldr	r0, [r4, #0]
 8003062:	f000 faac 	bl	80035be <memmove>
 8003066:	68a3      	ldr	r3, [r4, #8]
 8003068:	2000      	movs	r0, #0
 800306a:	1b9b      	subs	r3, r3, r6
 800306c:	60a3      	str	r3, [r4, #8]
 800306e:	6823      	ldr	r3, [r4, #0]
 8003070:	441e      	add	r6, r3
 8003072:	6026      	str	r6, [r4, #0]
 8003074:	e7dc      	b.n	8003030 <__ssputs_r+0x58>
 8003076:	462a      	mov	r2, r5
 8003078:	f000 fb60 	bl	800373c <_realloc_r>
 800307c:	4606      	mov	r6, r0
 800307e:	2800      	cmp	r0, #0
 8003080:	d1e2      	bne.n	8003048 <__ssputs_r+0x70>
 8003082:	6921      	ldr	r1, [r4, #16]
 8003084:	4650      	mov	r0, sl
 8003086:	f000 fab3 	bl	80035f0 <_free_r>
 800308a:	e7c8      	b.n	800301e <__ssputs_r+0x46>

0800308c <_svfiprintf_r>:
 800308c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003090:	461d      	mov	r5, r3
 8003092:	898b      	ldrh	r3, [r1, #12]
 8003094:	b09d      	sub	sp, #116	; 0x74
 8003096:	061f      	lsls	r7, r3, #24
 8003098:	4680      	mov	r8, r0
 800309a:	460c      	mov	r4, r1
 800309c:	4616      	mov	r6, r2
 800309e:	d50f      	bpl.n	80030c0 <_svfiprintf_r+0x34>
 80030a0:	690b      	ldr	r3, [r1, #16]
 80030a2:	b96b      	cbnz	r3, 80030c0 <_svfiprintf_r+0x34>
 80030a4:	2140      	movs	r1, #64	; 0x40
 80030a6:	f000 faef 	bl	8003688 <_malloc_r>
 80030aa:	6020      	str	r0, [r4, #0]
 80030ac:	6120      	str	r0, [r4, #16]
 80030ae:	b928      	cbnz	r0, 80030bc <_svfiprintf_r+0x30>
 80030b0:	230c      	movs	r3, #12
 80030b2:	f8c8 3000 	str.w	r3, [r8]
 80030b6:	f04f 30ff 	mov.w	r0, #4294967295
 80030ba:	e0c8      	b.n	800324e <_svfiprintf_r+0x1c2>
 80030bc:	2340      	movs	r3, #64	; 0x40
 80030be:	6163      	str	r3, [r4, #20]
 80030c0:	2300      	movs	r3, #0
 80030c2:	9309      	str	r3, [sp, #36]	; 0x24
 80030c4:	2320      	movs	r3, #32
 80030c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030ca:	2330      	movs	r3, #48	; 0x30
 80030cc:	f04f 0b01 	mov.w	fp, #1
 80030d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80030d4:	9503      	str	r5, [sp, #12]
 80030d6:	4637      	mov	r7, r6
 80030d8:	463d      	mov	r5, r7
 80030da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80030de:	b10b      	cbz	r3, 80030e4 <_svfiprintf_r+0x58>
 80030e0:	2b25      	cmp	r3, #37	; 0x25
 80030e2:	d13e      	bne.n	8003162 <_svfiprintf_r+0xd6>
 80030e4:	ebb7 0a06 	subs.w	sl, r7, r6
 80030e8:	d00b      	beq.n	8003102 <_svfiprintf_r+0x76>
 80030ea:	4653      	mov	r3, sl
 80030ec:	4632      	mov	r2, r6
 80030ee:	4621      	mov	r1, r4
 80030f0:	4640      	mov	r0, r8
 80030f2:	f7ff ff71 	bl	8002fd8 <__ssputs_r>
 80030f6:	3001      	adds	r0, #1
 80030f8:	f000 80a4 	beq.w	8003244 <_svfiprintf_r+0x1b8>
 80030fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030fe:	4453      	add	r3, sl
 8003100:	9309      	str	r3, [sp, #36]	; 0x24
 8003102:	783b      	ldrb	r3, [r7, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 809d 	beq.w	8003244 <_svfiprintf_r+0x1b8>
 800310a:	2300      	movs	r3, #0
 800310c:	f04f 32ff 	mov.w	r2, #4294967295
 8003110:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003114:	9304      	str	r3, [sp, #16]
 8003116:	9307      	str	r3, [sp, #28]
 8003118:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800311c:	931a      	str	r3, [sp, #104]	; 0x68
 800311e:	462f      	mov	r7, r5
 8003120:	2205      	movs	r2, #5
 8003122:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003126:	4850      	ldr	r0, [pc, #320]	; (8003268 <_svfiprintf_r+0x1dc>)
 8003128:	f000 fa30 	bl	800358c <memchr>
 800312c:	9b04      	ldr	r3, [sp, #16]
 800312e:	b9d0      	cbnz	r0, 8003166 <_svfiprintf_r+0xda>
 8003130:	06d9      	lsls	r1, r3, #27
 8003132:	bf44      	itt	mi
 8003134:	2220      	movmi	r2, #32
 8003136:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800313a:	071a      	lsls	r2, r3, #28
 800313c:	bf44      	itt	mi
 800313e:	222b      	movmi	r2, #43	; 0x2b
 8003140:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003144:	782a      	ldrb	r2, [r5, #0]
 8003146:	2a2a      	cmp	r2, #42	; 0x2a
 8003148:	d015      	beq.n	8003176 <_svfiprintf_r+0xea>
 800314a:	462f      	mov	r7, r5
 800314c:	2000      	movs	r0, #0
 800314e:	250a      	movs	r5, #10
 8003150:	9a07      	ldr	r2, [sp, #28]
 8003152:	4639      	mov	r1, r7
 8003154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003158:	3b30      	subs	r3, #48	; 0x30
 800315a:	2b09      	cmp	r3, #9
 800315c:	d94d      	bls.n	80031fa <_svfiprintf_r+0x16e>
 800315e:	b1b8      	cbz	r0, 8003190 <_svfiprintf_r+0x104>
 8003160:	e00f      	b.n	8003182 <_svfiprintf_r+0xf6>
 8003162:	462f      	mov	r7, r5
 8003164:	e7b8      	b.n	80030d8 <_svfiprintf_r+0x4c>
 8003166:	4a40      	ldr	r2, [pc, #256]	; (8003268 <_svfiprintf_r+0x1dc>)
 8003168:	463d      	mov	r5, r7
 800316a:	1a80      	subs	r0, r0, r2
 800316c:	fa0b f000 	lsl.w	r0, fp, r0
 8003170:	4318      	orrs	r0, r3
 8003172:	9004      	str	r0, [sp, #16]
 8003174:	e7d3      	b.n	800311e <_svfiprintf_r+0x92>
 8003176:	9a03      	ldr	r2, [sp, #12]
 8003178:	1d11      	adds	r1, r2, #4
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	9103      	str	r1, [sp, #12]
 800317e:	2a00      	cmp	r2, #0
 8003180:	db01      	blt.n	8003186 <_svfiprintf_r+0xfa>
 8003182:	9207      	str	r2, [sp, #28]
 8003184:	e004      	b.n	8003190 <_svfiprintf_r+0x104>
 8003186:	4252      	negs	r2, r2
 8003188:	f043 0302 	orr.w	r3, r3, #2
 800318c:	9207      	str	r2, [sp, #28]
 800318e:	9304      	str	r3, [sp, #16]
 8003190:	783b      	ldrb	r3, [r7, #0]
 8003192:	2b2e      	cmp	r3, #46	; 0x2e
 8003194:	d10c      	bne.n	80031b0 <_svfiprintf_r+0x124>
 8003196:	787b      	ldrb	r3, [r7, #1]
 8003198:	2b2a      	cmp	r3, #42	; 0x2a
 800319a:	d133      	bne.n	8003204 <_svfiprintf_r+0x178>
 800319c:	9b03      	ldr	r3, [sp, #12]
 800319e:	3702      	adds	r7, #2
 80031a0:	1d1a      	adds	r2, r3, #4
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	9203      	str	r2, [sp, #12]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	bfb8      	it	lt
 80031aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80031ae:	9305      	str	r3, [sp, #20]
 80031b0:	4d2e      	ldr	r5, [pc, #184]	; (800326c <_svfiprintf_r+0x1e0>)
 80031b2:	2203      	movs	r2, #3
 80031b4:	7839      	ldrb	r1, [r7, #0]
 80031b6:	4628      	mov	r0, r5
 80031b8:	f000 f9e8 	bl	800358c <memchr>
 80031bc:	b138      	cbz	r0, 80031ce <_svfiprintf_r+0x142>
 80031be:	2340      	movs	r3, #64	; 0x40
 80031c0:	1b40      	subs	r0, r0, r5
 80031c2:	fa03 f000 	lsl.w	r0, r3, r0
 80031c6:	9b04      	ldr	r3, [sp, #16]
 80031c8:	3701      	adds	r7, #1
 80031ca:	4303      	orrs	r3, r0
 80031cc:	9304      	str	r3, [sp, #16]
 80031ce:	7839      	ldrb	r1, [r7, #0]
 80031d0:	2206      	movs	r2, #6
 80031d2:	4827      	ldr	r0, [pc, #156]	; (8003270 <_svfiprintf_r+0x1e4>)
 80031d4:	1c7e      	adds	r6, r7, #1
 80031d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80031da:	f000 f9d7 	bl	800358c <memchr>
 80031de:	2800      	cmp	r0, #0
 80031e0:	d038      	beq.n	8003254 <_svfiprintf_r+0x1c8>
 80031e2:	4b24      	ldr	r3, [pc, #144]	; (8003274 <_svfiprintf_r+0x1e8>)
 80031e4:	bb13      	cbnz	r3, 800322c <_svfiprintf_r+0x1a0>
 80031e6:	9b03      	ldr	r3, [sp, #12]
 80031e8:	3307      	adds	r3, #7
 80031ea:	f023 0307 	bic.w	r3, r3, #7
 80031ee:	3308      	adds	r3, #8
 80031f0:	9303      	str	r3, [sp, #12]
 80031f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031f4:	444b      	add	r3, r9
 80031f6:	9309      	str	r3, [sp, #36]	; 0x24
 80031f8:	e76d      	b.n	80030d6 <_svfiprintf_r+0x4a>
 80031fa:	fb05 3202 	mla	r2, r5, r2, r3
 80031fe:	2001      	movs	r0, #1
 8003200:	460f      	mov	r7, r1
 8003202:	e7a6      	b.n	8003152 <_svfiprintf_r+0xc6>
 8003204:	2300      	movs	r3, #0
 8003206:	250a      	movs	r5, #10
 8003208:	4619      	mov	r1, r3
 800320a:	3701      	adds	r7, #1
 800320c:	9305      	str	r3, [sp, #20]
 800320e:	4638      	mov	r0, r7
 8003210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003214:	3a30      	subs	r2, #48	; 0x30
 8003216:	2a09      	cmp	r2, #9
 8003218:	d903      	bls.n	8003222 <_svfiprintf_r+0x196>
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0c8      	beq.n	80031b0 <_svfiprintf_r+0x124>
 800321e:	9105      	str	r1, [sp, #20]
 8003220:	e7c6      	b.n	80031b0 <_svfiprintf_r+0x124>
 8003222:	fb05 2101 	mla	r1, r5, r1, r2
 8003226:	2301      	movs	r3, #1
 8003228:	4607      	mov	r7, r0
 800322a:	e7f0      	b.n	800320e <_svfiprintf_r+0x182>
 800322c:	ab03      	add	r3, sp, #12
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	4622      	mov	r2, r4
 8003232:	4b11      	ldr	r3, [pc, #68]	; (8003278 <_svfiprintf_r+0x1ec>)
 8003234:	a904      	add	r1, sp, #16
 8003236:	4640      	mov	r0, r8
 8003238:	f3af 8000 	nop.w
 800323c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003240:	4681      	mov	r9, r0
 8003242:	d1d6      	bne.n	80031f2 <_svfiprintf_r+0x166>
 8003244:	89a3      	ldrh	r3, [r4, #12]
 8003246:	065b      	lsls	r3, r3, #25
 8003248:	f53f af35 	bmi.w	80030b6 <_svfiprintf_r+0x2a>
 800324c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800324e:	b01d      	add	sp, #116	; 0x74
 8003250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003254:	ab03      	add	r3, sp, #12
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	4622      	mov	r2, r4
 800325a:	4b07      	ldr	r3, [pc, #28]	; (8003278 <_svfiprintf_r+0x1ec>)
 800325c:	a904      	add	r1, sp, #16
 800325e:	4640      	mov	r0, r8
 8003260:	f000 f882 	bl	8003368 <_printf_i>
 8003264:	e7ea      	b.n	800323c <_svfiprintf_r+0x1b0>
 8003266:	bf00      	nop
 8003268:	08003834 	.word	0x08003834
 800326c:	0800383a 	.word	0x0800383a
 8003270:	0800383e 	.word	0x0800383e
 8003274:	00000000 	.word	0x00000000
 8003278:	08002fd9 	.word	0x08002fd9

0800327c <_printf_common>:
 800327c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003280:	4691      	mov	r9, r2
 8003282:	461f      	mov	r7, r3
 8003284:	688a      	ldr	r2, [r1, #8]
 8003286:	690b      	ldr	r3, [r1, #16]
 8003288:	4606      	mov	r6, r0
 800328a:	4293      	cmp	r3, r2
 800328c:	bfb8      	it	lt
 800328e:	4613      	movlt	r3, r2
 8003290:	f8c9 3000 	str.w	r3, [r9]
 8003294:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003298:	460c      	mov	r4, r1
 800329a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800329e:	b112      	cbz	r2, 80032a6 <_printf_common+0x2a>
 80032a0:	3301      	adds	r3, #1
 80032a2:	f8c9 3000 	str.w	r3, [r9]
 80032a6:	6823      	ldr	r3, [r4, #0]
 80032a8:	0699      	lsls	r1, r3, #26
 80032aa:	bf42      	ittt	mi
 80032ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 80032b0:	3302      	addmi	r3, #2
 80032b2:	f8c9 3000 	strmi.w	r3, [r9]
 80032b6:	6825      	ldr	r5, [r4, #0]
 80032b8:	f015 0506 	ands.w	r5, r5, #6
 80032bc:	d107      	bne.n	80032ce <_printf_common+0x52>
 80032be:	f104 0a19 	add.w	sl, r4, #25
 80032c2:	68e3      	ldr	r3, [r4, #12]
 80032c4:	f8d9 2000 	ldr.w	r2, [r9]
 80032c8:	1a9b      	subs	r3, r3, r2
 80032ca:	42ab      	cmp	r3, r5
 80032cc:	dc29      	bgt.n	8003322 <_printf_common+0xa6>
 80032ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80032d2:	6822      	ldr	r2, [r4, #0]
 80032d4:	3300      	adds	r3, #0
 80032d6:	bf18      	it	ne
 80032d8:	2301      	movne	r3, #1
 80032da:	0692      	lsls	r2, r2, #26
 80032dc:	d42e      	bmi.n	800333c <_printf_common+0xc0>
 80032de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032e2:	4639      	mov	r1, r7
 80032e4:	4630      	mov	r0, r6
 80032e6:	47c0      	blx	r8
 80032e8:	3001      	adds	r0, #1
 80032ea:	d021      	beq.n	8003330 <_printf_common+0xb4>
 80032ec:	6823      	ldr	r3, [r4, #0]
 80032ee:	68e5      	ldr	r5, [r4, #12]
 80032f0:	f003 0306 	and.w	r3, r3, #6
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	bf18      	it	ne
 80032f8:	2500      	movne	r5, #0
 80032fa:	f8d9 2000 	ldr.w	r2, [r9]
 80032fe:	f04f 0900 	mov.w	r9, #0
 8003302:	bf08      	it	eq
 8003304:	1aad      	subeq	r5, r5, r2
 8003306:	68a3      	ldr	r3, [r4, #8]
 8003308:	6922      	ldr	r2, [r4, #16]
 800330a:	bf08      	it	eq
 800330c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003310:	4293      	cmp	r3, r2
 8003312:	bfc4      	itt	gt
 8003314:	1a9b      	subgt	r3, r3, r2
 8003316:	18ed      	addgt	r5, r5, r3
 8003318:	341a      	adds	r4, #26
 800331a:	454d      	cmp	r5, r9
 800331c:	d11a      	bne.n	8003354 <_printf_common+0xd8>
 800331e:	2000      	movs	r0, #0
 8003320:	e008      	b.n	8003334 <_printf_common+0xb8>
 8003322:	2301      	movs	r3, #1
 8003324:	4652      	mov	r2, sl
 8003326:	4639      	mov	r1, r7
 8003328:	4630      	mov	r0, r6
 800332a:	47c0      	blx	r8
 800332c:	3001      	adds	r0, #1
 800332e:	d103      	bne.n	8003338 <_printf_common+0xbc>
 8003330:	f04f 30ff 	mov.w	r0, #4294967295
 8003334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003338:	3501      	adds	r5, #1
 800333a:	e7c2      	b.n	80032c2 <_printf_common+0x46>
 800333c:	2030      	movs	r0, #48	; 0x30
 800333e:	18e1      	adds	r1, r4, r3
 8003340:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800334a:	4422      	add	r2, r4
 800334c:	3302      	adds	r3, #2
 800334e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003352:	e7c4      	b.n	80032de <_printf_common+0x62>
 8003354:	2301      	movs	r3, #1
 8003356:	4622      	mov	r2, r4
 8003358:	4639      	mov	r1, r7
 800335a:	4630      	mov	r0, r6
 800335c:	47c0      	blx	r8
 800335e:	3001      	adds	r0, #1
 8003360:	d0e6      	beq.n	8003330 <_printf_common+0xb4>
 8003362:	f109 0901 	add.w	r9, r9, #1
 8003366:	e7d8      	b.n	800331a <_printf_common+0x9e>

08003368 <_printf_i>:
 8003368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800336c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003370:	460c      	mov	r4, r1
 8003372:	7e09      	ldrb	r1, [r1, #24]
 8003374:	b085      	sub	sp, #20
 8003376:	296e      	cmp	r1, #110	; 0x6e
 8003378:	4617      	mov	r7, r2
 800337a:	4606      	mov	r6, r0
 800337c:	4698      	mov	r8, r3
 800337e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003380:	f000 80b3 	beq.w	80034ea <_printf_i+0x182>
 8003384:	d822      	bhi.n	80033cc <_printf_i+0x64>
 8003386:	2963      	cmp	r1, #99	; 0x63
 8003388:	d036      	beq.n	80033f8 <_printf_i+0x90>
 800338a:	d80a      	bhi.n	80033a2 <_printf_i+0x3a>
 800338c:	2900      	cmp	r1, #0
 800338e:	f000 80b9 	beq.w	8003504 <_printf_i+0x19c>
 8003392:	2958      	cmp	r1, #88	; 0x58
 8003394:	f000 8083 	beq.w	800349e <_printf_i+0x136>
 8003398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800339c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80033a0:	e032      	b.n	8003408 <_printf_i+0xa0>
 80033a2:	2964      	cmp	r1, #100	; 0x64
 80033a4:	d001      	beq.n	80033aa <_printf_i+0x42>
 80033a6:	2969      	cmp	r1, #105	; 0x69
 80033a8:	d1f6      	bne.n	8003398 <_printf_i+0x30>
 80033aa:	6820      	ldr	r0, [r4, #0]
 80033ac:	6813      	ldr	r3, [r2, #0]
 80033ae:	0605      	lsls	r5, r0, #24
 80033b0:	f103 0104 	add.w	r1, r3, #4
 80033b4:	d52a      	bpl.n	800340c <_printf_i+0xa4>
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6011      	str	r1, [r2, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	da03      	bge.n	80033c6 <_printf_i+0x5e>
 80033be:	222d      	movs	r2, #45	; 0x2d
 80033c0:	425b      	negs	r3, r3
 80033c2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80033c6:	486f      	ldr	r0, [pc, #444]	; (8003584 <_printf_i+0x21c>)
 80033c8:	220a      	movs	r2, #10
 80033ca:	e039      	b.n	8003440 <_printf_i+0xd8>
 80033cc:	2973      	cmp	r1, #115	; 0x73
 80033ce:	f000 809d 	beq.w	800350c <_printf_i+0x1a4>
 80033d2:	d808      	bhi.n	80033e6 <_printf_i+0x7e>
 80033d4:	296f      	cmp	r1, #111	; 0x6f
 80033d6:	d020      	beq.n	800341a <_printf_i+0xb2>
 80033d8:	2970      	cmp	r1, #112	; 0x70
 80033da:	d1dd      	bne.n	8003398 <_printf_i+0x30>
 80033dc:	6823      	ldr	r3, [r4, #0]
 80033de:	f043 0320 	orr.w	r3, r3, #32
 80033e2:	6023      	str	r3, [r4, #0]
 80033e4:	e003      	b.n	80033ee <_printf_i+0x86>
 80033e6:	2975      	cmp	r1, #117	; 0x75
 80033e8:	d017      	beq.n	800341a <_printf_i+0xb2>
 80033ea:	2978      	cmp	r1, #120	; 0x78
 80033ec:	d1d4      	bne.n	8003398 <_printf_i+0x30>
 80033ee:	2378      	movs	r3, #120	; 0x78
 80033f0:	4865      	ldr	r0, [pc, #404]	; (8003588 <_printf_i+0x220>)
 80033f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80033f6:	e055      	b.n	80034a4 <_printf_i+0x13c>
 80033f8:	6813      	ldr	r3, [r2, #0]
 80033fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033fe:	1d19      	adds	r1, r3, #4
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6011      	str	r1, [r2, #0]
 8003404:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003408:	2301      	movs	r3, #1
 800340a:	e08c      	b.n	8003526 <_printf_i+0x1be>
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003412:	6011      	str	r1, [r2, #0]
 8003414:	bf18      	it	ne
 8003416:	b21b      	sxthne	r3, r3
 8003418:	e7cf      	b.n	80033ba <_printf_i+0x52>
 800341a:	6813      	ldr	r3, [r2, #0]
 800341c:	6825      	ldr	r5, [r4, #0]
 800341e:	1d18      	adds	r0, r3, #4
 8003420:	6010      	str	r0, [r2, #0]
 8003422:	0628      	lsls	r0, r5, #24
 8003424:	d501      	bpl.n	800342a <_printf_i+0xc2>
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	e002      	b.n	8003430 <_printf_i+0xc8>
 800342a:	0668      	lsls	r0, r5, #25
 800342c:	d5fb      	bpl.n	8003426 <_printf_i+0xbe>
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	296f      	cmp	r1, #111	; 0x6f
 8003432:	bf14      	ite	ne
 8003434:	220a      	movne	r2, #10
 8003436:	2208      	moveq	r2, #8
 8003438:	4852      	ldr	r0, [pc, #328]	; (8003584 <_printf_i+0x21c>)
 800343a:	2100      	movs	r1, #0
 800343c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003440:	6865      	ldr	r5, [r4, #4]
 8003442:	2d00      	cmp	r5, #0
 8003444:	60a5      	str	r5, [r4, #8]
 8003446:	f2c0 8095 	blt.w	8003574 <_printf_i+0x20c>
 800344a:	6821      	ldr	r1, [r4, #0]
 800344c:	f021 0104 	bic.w	r1, r1, #4
 8003450:	6021      	str	r1, [r4, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d13d      	bne.n	80034d2 <_printf_i+0x16a>
 8003456:	2d00      	cmp	r5, #0
 8003458:	f040 808e 	bne.w	8003578 <_printf_i+0x210>
 800345c:	4665      	mov	r5, ip
 800345e:	2a08      	cmp	r2, #8
 8003460:	d10b      	bne.n	800347a <_printf_i+0x112>
 8003462:	6823      	ldr	r3, [r4, #0]
 8003464:	07db      	lsls	r3, r3, #31
 8003466:	d508      	bpl.n	800347a <_printf_i+0x112>
 8003468:	6923      	ldr	r3, [r4, #16]
 800346a:	6862      	ldr	r2, [r4, #4]
 800346c:	429a      	cmp	r2, r3
 800346e:	bfde      	ittt	le
 8003470:	2330      	movle	r3, #48	; 0x30
 8003472:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003476:	f105 35ff 	addle.w	r5, r5, #4294967295
 800347a:	ebac 0305 	sub.w	r3, ip, r5
 800347e:	6123      	str	r3, [r4, #16]
 8003480:	f8cd 8000 	str.w	r8, [sp]
 8003484:	463b      	mov	r3, r7
 8003486:	aa03      	add	r2, sp, #12
 8003488:	4621      	mov	r1, r4
 800348a:	4630      	mov	r0, r6
 800348c:	f7ff fef6 	bl	800327c <_printf_common>
 8003490:	3001      	adds	r0, #1
 8003492:	d14d      	bne.n	8003530 <_printf_i+0x1c8>
 8003494:	f04f 30ff 	mov.w	r0, #4294967295
 8003498:	b005      	add	sp, #20
 800349a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800349e:	4839      	ldr	r0, [pc, #228]	; (8003584 <_printf_i+0x21c>)
 80034a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80034a4:	6813      	ldr	r3, [r2, #0]
 80034a6:	6821      	ldr	r1, [r4, #0]
 80034a8:	1d1d      	adds	r5, r3, #4
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6015      	str	r5, [r2, #0]
 80034ae:	060a      	lsls	r2, r1, #24
 80034b0:	d50b      	bpl.n	80034ca <_printf_i+0x162>
 80034b2:	07ca      	lsls	r2, r1, #31
 80034b4:	bf44      	itt	mi
 80034b6:	f041 0120 	orrmi.w	r1, r1, #32
 80034ba:	6021      	strmi	r1, [r4, #0]
 80034bc:	b91b      	cbnz	r3, 80034c6 <_printf_i+0x15e>
 80034be:	6822      	ldr	r2, [r4, #0]
 80034c0:	f022 0220 	bic.w	r2, r2, #32
 80034c4:	6022      	str	r2, [r4, #0]
 80034c6:	2210      	movs	r2, #16
 80034c8:	e7b7      	b.n	800343a <_printf_i+0xd2>
 80034ca:	064d      	lsls	r5, r1, #25
 80034cc:	bf48      	it	mi
 80034ce:	b29b      	uxthmi	r3, r3
 80034d0:	e7ef      	b.n	80034b2 <_printf_i+0x14a>
 80034d2:	4665      	mov	r5, ip
 80034d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80034d8:	fb02 3311 	mls	r3, r2, r1, r3
 80034dc:	5cc3      	ldrb	r3, [r0, r3]
 80034de:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80034e2:	460b      	mov	r3, r1
 80034e4:	2900      	cmp	r1, #0
 80034e6:	d1f5      	bne.n	80034d4 <_printf_i+0x16c>
 80034e8:	e7b9      	b.n	800345e <_printf_i+0xf6>
 80034ea:	6813      	ldr	r3, [r2, #0]
 80034ec:	6825      	ldr	r5, [r4, #0]
 80034ee:	1d18      	adds	r0, r3, #4
 80034f0:	6961      	ldr	r1, [r4, #20]
 80034f2:	6010      	str	r0, [r2, #0]
 80034f4:	0628      	lsls	r0, r5, #24
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	d501      	bpl.n	80034fe <_printf_i+0x196>
 80034fa:	6019      	str	r1, [r3, #0]
 80034fc:	e002      	b.n	8003504 <_printf_i+0x19c>
 80034fe:	066a      	lsls	r2, r5, #25
 8003500:	d5fb      	bpl.n	80034fa <_printf_i+0x192>
 8003502:	8019      	strh	r1, [r3, #0]
 8003504:	2300      	movs	r3, #0
 8003506:	4665      	mov	r5, ip
 8003508:	6123      	str	r3, [r4, #16]
 800350a:	e7b9      	b.n	8003480 <_printf_i+0x118>
 800350c:	6813      	ldr	r3, [r2, #0]
 800350e:	1d19      	adds	r1, r3, #4
 8003510:	6011      	str	r1, [r2, #0]
 8003512:	681d      	ldr	r5, [r3, #0]
 8003514:	6862      	ldr	r2, [r4, #4]
 8003516:	2100      	movs	r1, #0
 8003518:	4628      	mov	r0, r5
 800351a:	f000 f837 	bl	800358c <memchr>
 800351e:	b108      	cbz	r0, 8003524 <_printf_i+0x1bc>
 8003520:	1b40      	subs	r0, r0, r5
 8003522:	6060      	str	r0, [r4, #4]
 8003524:	6863      	ldr	r3, [r4, #4]
 8003526:	6123      	str	r3, [r4, #16]
 8003528:	2300      	movs	r3, #0
 800352a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800352e:	e7a7      	b.n	8003480 <_printf_i+0x118>
 8003530:	6923      	ldr	r3, [r4, #16]
 8003532:	462a      	mov	r2, r5
 8003534:	4639      	mov	r1, r7
 8003536:	4630      	mov	r0, r6
 8003538:	47c0      	blx	r8
 800353a:	3001      	adds	r0, #1
 800353c:	d0aa      	beq.n	8003494 <_printf_i+0x12c>
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	079b      	lsls	r3, r3, #30
 8003542:	d413      	bmi.n	800356c <_printf_i+0x204>
 8003544:	68e0      	ldr	r0, [r4, #12]
 8003546:	9b03      	ldr	r3, [sp, #12]
 8003548:	4298      	cmp	r0, r3
 800354a:	bfb8      	it	lt
 800354c:	4618      	movlt	r0, r3
 800354e:	e7a3      	b.n	8003498 <_printf_i+0x130>
 8003550:	2301      	movs	r3, #1
 8003552:	464a      	mov	r2, r9
 8003554:	4639      	mov	r1, r7
 8003556:	4630      	mov	r0, r6
 8003558:	47c0      	blx	r8
 800355a:	3001      	adds	r0, #1
 800355c:	d09a      	beq.n	8003494 <_printf_i+0x12c>
 800355e:	3501      	adds	r5, #1
 8003560:	68e3      	ldr	r3, [r4, #12]
 8003562:	9a03      	ldr	r2, [sp, #12]
 8003564:	1a9b      	subs	r3, r3, r2
 8003566:	42ab      	cmp	r3, r5
 8003568:	dcf2      	bgt.n	8003550 <_printf_i+0x1e8>
 800356a:	e7eb      	b.n	8003544 <_printf_i+0x1dc>
 800356c:	2500      	movs	r5, #0
 800356e:	f104 0919 	add.w	r9, r4, #25
 8003572:	e7f5      	b.n	8003560 <_printf_i+0x1f8>
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1ac      	bne.n	80034d2 <_printf_i+0x16a>
 8003578:	7803      	ldrb	r3, [r0, #0]
 800357a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800357e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003582:	e76c      	b.n	800345e <_printf_i+0xf6>
 8003584:	08003845 	.word	0x08003845
 8003588:	08003856 	.word	0x08003856

0800358c <memchr>:
 800358c:	b510      	push	{r4, lr}
 800358e:	b2c9      	uxtb	r1, r1
 8003590:	4402      	add	r2, r0
 8003592:	4290      	cmp	r0, r2
 8003594:	4603      	mov	r3, r0
 8003596:	d101      	bne.n	800359c <memchr+0x10>
 8003598:	2300      	movs	r3, #0
 800359a:	e003      	b.n	80035a4 <memchr+0x18>
 800359c:	781c      	ldrb	r4, [r3, #0]
 800359e:	3001      	adds	r0, #1
 80035a0:	428c      	cmp	r4, r1
 80035a2:	d1f6      	bne.n	8003592 <memchr+0x6>
 80035a4:	4618      	mov	r0, r3
 80035a6:	bd10      	pop	{r4, pc}

080035a8 <memcpy>:
 80035a8:	b510      	push	{r4, lr}
 80035aa:	1e43      	subs	r3, r0, #1
 80035ac:	440a      	add	r2, r1
 80035ae:	4291      	cmp	r1, r2
 80035b0:	d100      	bne.n	80035b4 <memcpy+0xc>
 80035b2:	bd10      	pop	{r4, pc}
 80035b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035bc:	e7f7      	b.n	80035ae <memcpy+0x6>

080035be <memmove>:
 80035be:	4288      	cmp	r0, r1
 80035c0:	b510      	push	{r4, lr}
 80035c2:	eb01 0302 	add.w	r3, r1, r2
 80035c6:	d807      	bhi.n	80035d8 <memmove+0x1a>
 80035c8:	1e42      	subs	r2, r0, #1
 80035ca:	4299      	cmp	r1, r3
 80035cc:	d00a      	beq.n	80035e4 <memmove+0x26>
 80035ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035d2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80035d6:	e7f8      	b.n	80035ca <memmove+0xc>
 80035d8:	4283      	cmp	r3, r0
 80035da:	d9f5      	bls.n	80035c8 <memmove+0xa>
 80035dc:	1881      	adds	r1, r0, r2
 80035de:	1ad2      	subs	r2, r2, r3
 80035e0:	42d3      	cmn	r3, r2
 80035e2:	d100      	bne.n	80035e6 <memmove+0x28>
 80035e4:	bd10      	pop	{r4, pc}
 80035e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80035ea:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80035ee:	e7f7      	b.n	80035e0 <memmove+0x22>

080035f0 <_free_r>:
 80035f0:	b538      	push	{r3, r4, r5, lr}
 80035f2:	4605      	mov	r5, r0
 80035f4:	2900      	cmp	r1, #0
 80035f6:	d043      	beq.n	8003680 <_free_r+0x90>
 80035f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035fc:	1f0c      	subs	r4, r1, #4
 80035fe:	2b00      	cmp	r3, #0
 8003600:	bfb8      	it	lt
 8003602:	18e4      	addlt	r4, r4, r3
 8003604:	f000 f8d0 	bl	80037a8 <__malloc_lock>
 8003608:	4a1e      	ldr	r2, [pc, #120]	; (8003684 <_free_r+0x94>)
 800360a:	6813      	ldr	r3, [r2, #0]
 800360c:	4610      	mov	r0, r2
 800360e:	b933      	cbnz	r3, 800361e <_free_r+0x2e>
 8003610:	6063      	str	r3, [r4, #4]
 8003612:	6014      	str	r4, [r2, #0]
 8003614:	4628      	mov	r0, r5
 8003616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800361a:	f000 b8c6 	b.w	80037aa <__malloc_unlock>
 800361e:	42a3      	cmp	r3, r4
 8003620:	d90b      	bls.n	800363a <_free_r+0x4a>
 8003622:	6821      	ldr	r1, [r4, #0]
 8003624:	1862      	adds	r2, r4, r1
 8003626:	4293      	cmp	r3, r2
 8003628:	bf01      	itttt	eq
 800362a:	681a      	ldreq	r2, [r3, #0]
 800362c:	685b      	ldreq	r3, [r3, #4]
 800362e:	1852      	addeq	r2, r2, r1
 8003630:	6022      	streq	r2, [r4, #0]
 8003632:	6063      	str	r3, [r4, #4]
 8003634:	6004      	str	r4, [r0, #0]
 8003636:	e7ed      	b.n	8003614 <_free_r+0x24>
 8003638:	4613      	mov	r3, r2
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	b10a      	cbz	r2, 8003642 <_free_r+0x52>
 800363e:	42a2      	cmp	r2, r4
 8003640:	d9fa      	bls.n	8003638 <_free_r+0x48>
 8003642:	6819      	ldr	r1, [r3, #0]
 8003644:	1858      	adds	r0, r3, r1
 8003646:	42a0      	cmp	r0, r4
 8003648:	d10b      	bne.n	8003662 <_free_r+0x72>
 800364a:	6820      	ldr	r0, [r4, #0]
 800364c:	4401      	add	r1, r0
 800364e:	1858      	adds	r0, r3, r1
 8003650:	4282      	cmp	r2, r0
 8003652:	6019      	str	r1, [r3, #0]
 8003654:	d1de      	bne.n	8003614 <_free_r+0x24>
 8003656:	6810      	ldr	r0, [r2, #0]
 8003658:	6852      	ldr	r2, [r2, #4]
 800365a:	4401      	add	r1, r0
 800365c:	6019      	str	r1, [r3, #0]
 800365e:	605a      	str	r2, [r3, #4]
 8003660:	e7d8      	b.n	8003614 <_free_r+0x24>
 8003662:	d902      	bls.n	800366a <_free_r+0x7a>
 8003664:	230c      	movs	r3, #12
 8003666:	602b      	str	r3, [r5, #0]
 8003668:	e7d4      	b.n	8003614 <_free_r+0x24>
 800366a:	6820      	ldr	r0, [r4, #0]
 800366c:	1821      	adds	r1, r4, r0
 800366e:	428a      	cmp	r2, r1
 8003670:	bf01      	itttt	eq
 8003672:	6811      	ldreq	r1, [r2, #0]
 8003674:	6852      	ldreq	r2, [r2, #4]
 8003676:	1809      	addeq	r1, r1, r0
 8003678:	6021      	streq	r1, [r4, #0]
 800367a:	6062      	str	r2, [r4, #4]
 800367c:	605c      	str	r4, [r3, #4]
 800367e:	e7c9      	b.n	8003614 <_free_r+0x24>
 8003680:	bd38      	pop	{r3, r4, r5, pc}
 8003682:	bf00      	nop
 8003684:	200000a8 	.word	0x200000a8

08003688 <_malloc_r>:
 8003688:	b570      	push	{r4, r5, r6, lr}
 800368a:	1ccd      	adds	r5, r1, #3
 800368c:	f025 0503 	bic.w	r5, r5, #3
 8003690:	3508      	adds	r5, #8
 8003692:	2d0c      	cmp	r5, #12
 8003694:	bf38      	it	cc
 8003696:	250c      	movcc	r5, #12
 8003698:	2d00      	cmp	r5, #0
 800369a:	4606      	mov	r6, r0
 800369c:	db01      	blt.n	80036a2 <_malloc_r+0x1a>
 800369e:	42a9      	cmp	r1, r5
 80036a0:	d903      	bls.n	80036aa <_malloc_r+0x22>
 80036a2:	230c      	movs	r3, #12
 80036a4:	6033      	str	r3, [r6, #0]
 80036a6:	2000      	movs	r0, #0
 80036a8:	bd70      	pop	{r4, r5, r6, pc}
 80036aa:	f000 f87d 	bl	80037a8 <__malloc_lock>
 80036ae:	4a21      	ldr	r2, [pc, #132]	; (8003734 <_malloc_r+0xac>)
 80036b0:	6814      	ldr	r4, [r2, #0]
 80036b2:	4621      	mov	r1, r4
 80036b4:	b991      	cbnz	r1, 80036dc <_malloc_r+0x54>
 80036b6:	4c20      	ldr	r4, [pc, #128]	; (8003738 <_malloc_r+0xb0>)
 80036b8:	6823      	ldr	r3, [r4, #0]
 80036ba:	b91b      	cbnz	r3, 80036c4 <_malloc_r+0x3c>
 80036bc:	4630      	mov	r0, r6
 80036be:	f000 f863 	bl	8003788 <_sbrk_r>
 80036c2:	6020      	str	r0, [r4, #0]
 80036c4:	4629      	mov	r1, r5
 80036c6:	4630      	mov	r0, r6
 80036c8:	f000 f85e 	bl	8003788 <_sbrk_r>
 80036cc:	1c43      	adds	r3, r0, #1
 80036ce:	d124      	bne.n	800371a <_malloc_r+0x92>
 80036d0:	230c      	movs	r3, #12
 80036d2:	4630      	mov	r0, r6
 80036d4:	6033      	str	r3, [r6, #0]
 80036d6:	f000 f868 	bl	80037aa <__malloc_unlock>
 80036da:	e7e4      	b.n	80036a6 <_malloc_r+0x1e>
 80036dc:	680b      	ldr	r3, [r1, #0]
 80036de:	1b5b      	subs	r3, r3, r5
 80036e0:	d418      	bmi.n	8003714 <_malloc_r+0x8c>
 80036e2:	2b0b      	cmp	r3, #11
 80036e4:	d90f      	bls.n	8003706 <_malloc_r+0x7e>
 80036e6:	600b      	str	r3, [r1, #0]
 80036e8:	18cc      	adds	r4, r1, r3
 80036ea:	50cd      	str	r5, [r1, r3]
 80036ec:	4630      	mov	r0, r6
 80036ee:	f000 f85c 	bl	80037aa <__malloc_unlock>
 80036f2:	f104 000b 	add.w	r0, r4, #11
 80036f6:	1d23      	adds	r3, r4, #4
 80036f8:	f020 0007 	bic.w	r0, r0, #7
 80036fc:	1ac3      	subs	r3, r0, r3
 80036fe:	d0d3      	beq.n	80036a8 <_malloc_r+0x20>
 8003700:	425a      	negs	r2, r3
 8003702:	50e2      	str	r2, [r4, r3]
 8003704:	e7d0      	b.n	80036a8 <_malloc_r+0x20>
 8003706:	684b      	ldr	r3, [r1, #4]
 8003708:	428c      	cmp	r4, r1
 800370a:	bf16      	itet	ne
 800370c:	6063      	strne	r3, [r4, #4]
 800370e:	6013      	streq	r3, [r2, #0]
 8003710:	460c      	movne	r4, r1
 8003712:	e7eb      	b.n	80036ec <_malloc_r+0x64>
 8003714:	460c      	mov	r4, r1
 8003716:	6849      	ldr	r1, [r1, #4]
 8003718:	e7cc      	b.n	80036b4 <_malloc_r+0x2c>
 800371a:	1cc4      	adds	r4, r0, #3
 800371c:	f024 0403 	bic.w	r4, r4, #3
 8003720:	42a0      	cmp	r0, r4
 8003722:	d005      	beq.n	8003730 <_malloc_r+0xa8>
 8003724:	1a21      	subs	r1, r4, r0
 8003726:	4630      	mov	r0, r6
 8003728:	f000 f82e 	bl	8003788 <_sbrk_r>
 800372c:	3001      	adds	r0, #1
 800372e:	d0cf      	beq.n	80036d0 <_malloc_r+0x48>
 8003730:	6025      	str	r5, [r4, #0]
 8003732:	e7db      	b.n	80036ec <_malloc_r+0x64>
 8003734:	200000a8 	.word	0x200000a8
 8003738:	200000ac 	.word	0x200000ac

0800373c <_realloc_r>:
 800373c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800373e:	4607      	mov	r7, r0
 8003740:	4614      	mov	r4, r2
 8003742:	460e      	mov	r6, r1
 8003744:	b921      	cbnz	r1, 8003750 <_realloc_r+0x14>
 8003746:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800374a:	4611      	mov	r1, r2
 800374c:	f7ff bf9c 	b.w	8003688 <_malloc_r>
 8003750:	b922      	cbnz	r2, 800375c <_realloc_r+0x20>
 8003752:	f7ff ff4d 	bl	80035f0 <_free_r>
 8003756:	4625      	mov	r5, r4
 8003758:	4628      	mov	r0, r5
 800375a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800375c:	f000 f826 	bl	80037ac <_malloc_usable_size_r>
 8003760:	42a0      	cmp	r0, r4
 8003762:	d20f      	bcs.n	8003784 <_realloc_r+0x48>
 8003764:	4621      	mov	r1, r4
 8003766:	4638      	mov	r0, r7
 8003768:	f7ff ff8e 	bl	8003688 <_malloc_r>
 800376c:	4605      	mov	r5, r0
 800376e:	2800      	cmp	r0, #0
 8003770:	d0f2      	beq.n	8003758 <_realloc_r+0x1c>
 8003772:	4631      	mov	r1, r6
 8003774:	4622      	mov	r2, r4
 8003776:	f7ff ff17 	bl	80035a8 <memcpy>
 800377a:	4631      	mov	r1, r6
 800377c:	4638      	mov	r0, r7
 800377e:	f7ff ff37 	bl	80035f0 <_free_r>
 8003782:	e7e9      	b.n	8003758 <_realloc_r+0x1c>
 8003784:	4635      	mov	r5, r6
 8003786:	e7e7      	b.n	8003758 <_realloc_r+0x1c>

08003788 <_sbrk_r>:
 8003788:	b538      	push	{r3, r4, r5, lr}
 800378a:	2300      	movs	r3, #0
 800378c:	4c05      	ldr	r4, [pc, #20]	; (80037a4 <_sbrk_r+0x1c>)
 800378e:	4605      	mov	r5, r0
 8003790:	4608      	mov	r0, r1
 8003792:	6023      	str	r3, [r4, #0]
 8003794:	f7fd fb06 	bl	8000da4 <_sbrk>
 8003798:	1c43      	adds	r3, r0, #1
 800379a:	d102      	bne.n	80037a2 <_sbrk_r+0x1a>
 800379c:	6823      	ldr	r3, [r4, #0]
 800379e:	b103      	cbz	r3, 80037a2 <_sbrk_r+0x1a>
 80037a0:	602b      	str	r3, [r5, #0]
 80037a2:	bd38      	pop	{r3, r4, r5, pc}
 80037a4:	2000020c 	.word	0x2000020c

080037a8 <__malloc_lock>:
 80037a8:	4770      	bx	lr

080037aa <__malloc_unlock>:
 80037aa:	4770      	bx	lr

080037ac <_malloc_usable_size_r>:
 80037ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037b0:	1f18      	subs	r0, r3, #4
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	bfbc      	itt	lt
 80037b6:	580b      	ldrlt	r3, [r1, r0]
 80037b8:	18c0      	addlt	r0, r0, r3
 80037ba:	4770      	bx	lr

080037bc <_init>:
 80037bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037be:	bf00      	nop
 80037c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037c2:	bc08      	pop	{r3}
 80037c4:	469e      	mov	lr, r3
 80037c6:	4770      	bx	lr

080037c8 <_fini>:
 80037c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ca:	bf00      	nop
 80037cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ce:	bc08      	pop	{r3}
 80037d0:	469e      	mov	lr, r3
 80037d2:	4770      	bx	lr
